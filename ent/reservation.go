// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/abc3354/CODEV-back/ent/profile"
	"github.com/abc3354/CODEV-back/ent/reservation"
	"github.com/abc3354/CODEV-back/ent/salle"
	"github.com/google/uuid"
)

// Reservation is the model entity for the Reservation schema.
type Reservation struct {
	config `json:"-"`
	// ProfileID holds the value of the "profile_id" field.
	ProfileID uuid.UUID `json:"profile_id,omitempty"`
	// SalleID holds the value of the "salle_id" field.
	SalleID int `json:"salle_id,omitempty"`
	// QuantityStudents holds the value of the "quantity_students" field.
	QuantityStudents int `json:"quantity_students,omitempty"`
	// HoraireResInitial holds the value of the "horaire_res_initial" field.
	HoraireResInitial time.Time `json:"horaire_res_initial,omitempty"`
	// HoraireResFinal holds the value of the "horaire_res_final" field.
	HoraireResFinal time.Time `json:"horaire_res_final,omitempty"`
	// HoraireAct holds the value of the "horaire_act" field.
	HoraireAct time.Time `json:"horaire_act,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReservationQuery when eager-loading is set.
	Edges ReservationEdges `json:"edges"`
}

// ReservationEdges holds the relations/edges for other nodes in the graph.
type ReservationEdges struct {
	// Profile holds the value of the profile edge.
	Profile *Profile `json:"profile,omitempty"`
	// Salle holds the value of the salle edge.
	Salle *Salle `json:"salle,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProfileOrErr returns the Profile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReservationEdges) ProfileOrErr() (*Profile, error) {
	if e.loadedTypes[0] {
		if e.Profile == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: profile.Label}
		}
		return e.Profile, nil
	}
	return nil, &NotLoadedError{edge: "profile"}
}

// SalleOrErr returns the Salle value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReservationEdges) SalleOrErr() (*Salle, error) {
	if e.loadedTypes[1] {
		if e.Salle == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: salle.Label}
		}
		return e.Salle, nil
	}
	return nil, &NotLoadedError{edge: "salle"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Reservation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case reservation.FieldSalleID, reservation.FieldQuantityStudents:
			values[i] = new(sql.NullInt64)
		case reservation.FieldHoraireResInitial, reservation.FieldHoraireResFinal, reservation.FieldHoraireAct:
			values[i] = new(sql.NullTime)
		case reservation.FieldProfileID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Reservation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Reservation fields.
func (r *Reservation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case reservation.FieldProfileID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field profile_id", values[i])
			} else if value != nil {
				r.ProfileID = *value
			}
		case reservation.FieldSalleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field salle_id", values[i])
			} else if value.Valid {
				r.SalleID = int(value.Int64)
			}
		case reservation.FieldQuantityStudents:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity_students", values[i])
			} else if value.Valid {
				r.QuantityStudents = int(value.Int64)
			}
		case reservation.FieldHoraireResInitial:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field horaire_res_initial", values[i])
			} else if value.Valid {
				r.HoraireResInitial = value.Time
			}
		case reservation.FieldHoraireResFinal:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field horaire_res_final", values[i])
			} else if value.Valid {
				r.HoraireResFinal = value.Time
			}
		case reservation.FieldHoraireAct:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field horaire_act", values[i])
			} else if value.Valid {
				r.HoraireAct = value.Time
			}
		}
	}
	return nil
}

// QueryProfile queries the "profile" edge of the Reservation entity.
func (r *Reservation) QueryProfile() *ProfileQuery {
	return (&ReservationClient{config: r.config}).QueryProfile(r)
}

// QuerySalle queries the "salle" edge of the Reservation entity.
func (r *Reservation) QuerySalle() *SalleQuery {
	return (&ReservationClient{config: r.config}).QuerySalle(r)
}

// Update returns a builder for updating this Reservation.
// Note that you need to call Reservation.Unwrap() before calling this method if this Reservation
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Reservation) Update() *ReservationUpdateOne {
	return (&ReservationClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Reservation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Reservation) Unwrap() *Reservation {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Reservation is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Reservation) String() string {
	var builder strings.Builder
	builder.WriteString("Reservation(")
	builder.WriteString("profile_id=")
	builder.WriteString(fmt.Sprintf("%v", r.ProfileID))
	builder.WriteString(", ")
	builder.WriteString("salle_id=")
	builder.WriteString(fmt.Sprintf("%v", r.SalleID))
	builder.WriteString(", ")
	builder.WriteString("quantity_students=")
	builder.WriteString(fmt.Sprintf("%v", r.QuantityStudents))
	builder.WriteString(", ")
	builder.WriteString("horaire_res_initial=")
	builder.WriteString(r.HoraireResInitial.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("horaire_res_final=")
	builder.WriteString(r.HoraireResFinal.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("horaire_act=")
	builder.WriteString(r.HoraireAct.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Reservations is a parsable slice of Reservation.
type Reservations []*Reservation

func (r Reservations) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
