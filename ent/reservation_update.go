// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/abc3354/CODEV-back/ent/predicate"
	"github.com/abc3354/CODEV-back/ent/profile"
	"github.com/abc3354/CODEV-back/ent/reservation"
	"github.com/abc3354/CODEV-back/ent/salle"
	"github.com/google/uuid"
)

// ReservationUpdate is the builder for updating Reservation entities.
type ReservationUpdate struct {
	config
	hooks    []Hook
	mutation *ReservationMutation
}

// Where appends a list predicates to the ReservationUpdate builder.
func (ru *ReservationUpdate) Where(ps ...predicate.Reservation) *ReservationUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetProfileID sets the "profile_id" field.
func (ru *ReservationUpdate) SetProfileID(u uuid.UUID) *ReservationUpdate {
	ru.mutation.SetProfileID(u)
	return ru
}

// SetSalleID sets the "salle_id" field.
func (ru *ReservationUpdate) SetSalleID(i int) *ReservationUpdate {
	ru.mutation.SetSalleID(i)
	return ru
}

// SetQuantityStudents sets the "quantity_students" field.
func (ru *ReservationUpdate) SetQuantityStudents(i int) *ReservationUpdate {
	ru.mutation.ResetQuantityStudents()
	ru.mutation.SetQuantityStudents(i)
	return ru
}

// AddQuantityStudents adds i to the "quantity_students" field.
func (ru *ReservationUpdate) AddQuantityStudents(i int) *ReservationUpdate {
	ru.mutation.AddQuantityStudents(i)
	return ru
}

// SetHoraireResInitial sets the "horaire_res_initial" field.
func (ru *ReservationUpdate) SetHoraireResInitial(t time.Time) *ReservationUpdate {
	ru.mutation.SetHoraireResInitial(t)
	return ru
}

// SetHoraireResFinal sets the "horaire_res_final" field.
func (ru *ReservationUpdate) SetHoraireResFinal(t time.Time) *ReservationUpdate {
	ru.mutation.SetHoraireResFinal(t)
	return ru
}

// SetHoraireAct sets the "horaire_act" field.
func (ru *ReservationUpdate) SetHoraireAct(t time.Time) *ReservationUpdate {
	ru.mutation.SetHoraireAct(t)
	return ru
}

// SetProfile sets the "profile" edge to the Profile entity.
func (ru *ReservationUpdate) SetProfile(p *Profile) *ReservationUpdate {
	return ru.SetProfileID(p.ID)
}

// SetSalle sets the "salle" edge to the Salle entity.
func (ru *ReservationUpdate) SetSalle(s *Salle) *ReservationUpdate {
	return ru.SetSalleID(s.ID)
}

// Mutation returns the ReservationMutation object of the builder.
func (ru *ReservationUpdate) Mutation() *ReservationMutation {
	return ru.mutation
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (ru *ReservationUpdate) ClearProfile() *ReservationUpdate {
	ru.mutation.ClearProfile()
	return ru
}

// ClearSalle clears the "salle" edge to the Salle entity.
func (ru *ReservationUpdate) ClearSalle() *ReservationUpdate {
	ru.mutation.ClearSalle()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ReservationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ReservationMutation](ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReservationUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReservationUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReservationUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *ReservationUpdate) check() error {
	if _, ok := ru.mutation.ProfileID(); ru.mutation.ProfileCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Reservation.profile"`)
	}
	if _, ok := ru.mutation.SalleID(); ru.mutation.SalleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Reservation.salle"`)
	}
	return nil
}

func (ru *ReservationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   reservation.Table,
			Columns: reservation.Columns,
			CompositeID: []*sqlgraph.FieldSpec{
				{
					Type:   field.TypeUUID,
					Column: reservation.FieldProfileID,
				},
				{
					Type:   field.TypeInt,
					Column: reservation.FieldSalleID,
				},
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.QuantityStudents(); ok {
		_spec.SetField(reservation.FieldQuantityStudents, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedQuantityStudents(); ok {
		_spec.AddField(reservation.FieldQuantityStudents, field.TypeInt, value)
	}
	if value, ok := ru.mutation.HoraireResInitial(); ok {
		_spec.SetField(reservation.FieldHoraireResInitial, field.TypeTime, value)
	}
	if value, ok := ru.mutation.HoraireResFinal(); ok {
		_spec.SetField(reservation.FieldHoraireResFinal, field.TypeTime, value)
	}
	if value, ok := ru.mutation.HoraireAct(); ok {
		_spec.SetField(reservation.FieldHoraireAct, field.TypeTime, value)
	}
	if ru.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reservation.ProfileTable,
			Columns: []string{reservation.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reservation.ProfileTable,
			Columns: []string{reservation.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.SalleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reservation.SalleTable,
			Columns: []string{reservation.SalleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: salle.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.SalleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reservation.SalleTable,
			Columns: []string{reservation.SalleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: salle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reservation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// ReservationUpdateOne is the builder for updating a single Reservation entity.
type ReservationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReservationMutation
}

// SetProfileID sets the "profile_id" field.
func (ruo *ReservationUpdateOne) SetProfileID(u uuid.UUID) *ReservationUpdateOne {
	ruo.mutation.SetProfileID(u)
	return ruo
}

// SetSalleID sets the "salle_id" field.
func (ruo *ReservationUpdateOne) SetSalleID(i int) *ReservationUpdateOne {
	ruo.mutation.SetSalleID(i)
	return ruo
}

// SetQuantityStudents sets the "quantity_students" field.
func (ruo *ReservationUpdateOne) SetQuantityStudents(i int) *ReservationUpdateOne {
	ruo.mutation.ResetQuantityStudents()
	ruo.mutation.SetQuantityStudents(i)
	return ruo
}

// AddQuantityStudents adds i to the "quantity_students" field.
func (ruo *ReservationUpdateOne) AddQuantityStudents(i int) *ReservationUpdateOne {
	ruo.mutation.AddQuantityStudents(i)
	return ruo
}

// SetHoraireResInitial sets the "horaire_res_initial" field.
func (ruo *ReservationUpdateOne) SetHoraireResInitial(t time.Time) *ReservationUpdateOne {
	ruo.mutation.SetHoraireResInitial(t)
	return ruo
}

// SetHoraireResFinal sets the "horaire_res_final" field.
func (ruo *ReservationUpdateOne) SetHoraireResFinal(t time.Time) *ReservationUpdateOne {
	ruo.mutation.SetHoraireResFinal(t)
	return ruo
}

// SetHoraireAct sets the "horaire_act" field.
func (ruo *ReservationUpdateOne) SetHoraireAct(t time.Time) *ReservationUpdateOne {
	ruo.mutation.SetHoraireAct(t)
	return ruo
}

// SetProfile sets the "profile" edge to the Profile entity.
func (ruo *ReservationUpdateOne) SetProfile(p *Profile) *ReservationUpdateOne {
	return ruo.SetProfileID(p.ID)
}

// SetSalle sets the "salle" edge to the Salle entity.
func (ruo *ReservationUpdateOne) SetSalle(s *Salle) *ReservationUpdateOne {
	return ruo.SetSalleID(s.ID)
}

// Mutation returns the ReservationMutation object of the builder.
func (ruo *ReservationUpdateOne) Mutation() *ReservationMutation {
	return ruo.mutation
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (ruo *ReservationUpdateOne) ClearProfile() *ReservationUpdateOne {
	ruo.mutation.ClearProfile()
	return ruo
}

// ClearSalle clears the "salle" edge to the Salle entity.
func (ruo *ReservationUpdateOne) ClearSalle() *ReservationUpdateOne {
	ruo.mutation.ClearSalle()
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ReservationUpdateOne) Select(field string, fields ...string) *ReservationUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Reservation entity.
func (ruo *ReservationUpdateOne) Save(ctx context.Context) (*Reservation, error) {
	return withHooks[*Reservation, ReservationMutation](ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReservationUpdateOne) SaveX(ctx context.Context) *Reservation {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReservationUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReservationUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ReservationUpdateOne) check() error {
	if _, ok := ruo.mutation.ProfileID(); ruo.mutation.ProfileCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Reservation.profile"`)
	}
	if _, ok := ruo.mutation.SalleID(); ruo.mutation.SalleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Reservation.salle"`)
	}
	return nil
}

func (ruo *ReservationUpdateOne) sqlSave(ctx context.Context) (_node *Reservation, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   reservation.Table,
			Columns: reservation.Columns,
			CompositeID: []*sqlgraph.FieldSpec{
				{
					Type:   field.TypeUUID,
					Column: reservation.FieldProfileID,
				},
				{
					Type:   field.TypeInt,
					Column: reservation.FieldSalleID,
				},
			},
		},
	}
	if id, ok := ruo.mutation.ProfileID(); !ok {
		return nil, &ValidationError{Name: "profile_id", err: errors.New(`ent: missing "Reservation.profile_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := ruo.mutation.SalleID(); !ok {
		return nil, &ValidationError{Name: "salle_id", err: errors.New(`ent: missing "Reservation.salle_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !reservation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.QuantityStudents(); ok {
		_spec.SetField(reservation.FieldQuantityStudents, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedQuantityStudents(); ok {
		_spec.AddField(reservation.FieldQuantityStudents, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.HoraireResInitial(); ok {
		_spec.SetField(reservation.FieldHoraireResInitial, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.HoraireResFinal(); ok {
		_spec.SetField(reservation.FieldHoraireResFinal, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.HoraireAct(); ok {
		_spec.SetField(reservation.FieldHoraireAct, field.TypeTime, value)
	}
	if ruo.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reservation.ProfileTable,
			Columns: []string{reservation.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reservation.ProfileTable,
			Columns: []string{reservation.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.SalleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reservation.SalleTable,
			Columns: []string{reservation.SalleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: salle.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.SalleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reservation.SalleTable,
			Columns: []string{reservation.SalleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: salle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Reservation{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reservation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
