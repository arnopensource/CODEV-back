// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/abc3354/CODEV-back/ent/friend"
	"github.com/abc3354/CODEV-back/ent/predicate"
	"github.com/abc3354/CODEV-back/ent/profile"
	"github.com/google/uuid"
)

// FriendUpdate is the builder for updating Friend entities.
type FriendUpdate struct {
	config
	hooks    []Hook
	mutation *FriendMutation
}

// Where appends a list predicates to the FriendUpdate builder.
func (fu *FriendUpdate) Where(ps ...predicate.Friend) *FriendUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetProfileID sets the "profile_id" field.
func (fu *FriendUpdate) SetProfileID(u uuid.UUID) *FriendUpdate {
	fu.mutation.SetProfileID(u)
	return fu
}

// SetFriendID sets the "friend_id" field.
func (fu *FriendUpdate) SetFriendID(u uuid.UUID) *FriendUpdate {
	fu.mutation.SetFriendID(u)
	return fu
}

// SetSince sets the "since" field.
func (fu *FriendUpdate) SetSince(t time.Time) *FriendUpdate {
	fu.mutation.SetSince(t)
	return fu
}

// SetAccepted sets the "accepted" field.
func (fu *FriendUpdate) SetAccepted(b bool) *FriendUpdate {
	fu.mutation.SetAccepted(b)
	return fu
}

// SetProfile sets the "profile" edge to the Profile entity.
func (fu *FriendUpdate) SetProfile(p *Profile) *FriendUpdate {
	return fu.SetProfileID(p.ID)
}

// SetFriend sets the "friend" edge to the Profile entity.
func (fu *FriendUpdate) SetFriend(p *Profile) *FriendUpdate {
	return fu.SetFriendID(p.ID)
}

// Mutation returns the FriendMutation object of the builder.
func (fu *FriendUpdate) Mutation() *FriendMutation {
	return fu.mutation
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (fu *FriendUpdate) ClearProfile() *FriendUpdate {
	fu.mutation.ClearProfile()
	return fu
}

// ClearFriend clears the "friend" edge to the Profile entity.
func (fu *FriendUpdate) ClearFriend() *FriendUpdate {
	fu.mutation.ClearFriend()
	return fu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FriendUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, FriendMutation](ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FriendUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FriendUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FriendUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FriendUpdate) check() error {
	if _, ok := fu.mutation.ProfileID(); fu.mutation.ProfileCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Friend.profile"`)
	}
	if _, ok := fu.mutation.FriendID(); fu.mutation.FriendCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Friend.friend"`)
	}
	return nil
}

func (fu *FriendUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   friend.Table,
			Columns: friend.Columns,
			CompositeID: []*sqlgraph.FieldSpec{
				{
					Type:   field.TypeUUID,
					Column: friend.FieldProfileID,
				},
				{
					Type:   field.TypeUUID,
					Column: friend.FieldFriendID,
				},
			},
		},
	}
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Since(); ok {
		_spec.SetField(friend.FieldSince, field.TypeTime, value)
	}
	if value, ok := fu.mutation.Accepted(); ok {
		_spec.SetField(friend.FieldAccepted, field.TypeBool, value)
	}
	if fu.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   friend.ProfileTable,
			Columns: []string{friend.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   friend.ProfileTable,
			Columns: []string{friend.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.FriendCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   friend.FriendTable,
			Columns: []string{friend.FriendColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.FriendIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   friend.FriendTable,
			Columns: []string{friend.FriendColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{friend.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FriendUpdateOne is the builder for updating a single Friend entity.
type FriendUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FriendMutation
}

// SetProfileID sets the "profile_id" field.
func (fuo *FriendUpdateOne) SetProfileID(u uuid.UUID) *FriendUpdateOne {
	fuo.mutation.SetProfileID(u)
	return fuo
}

// SetFriendID sets the "friend_id" field.
func (fuo *FriendUpdateOne) SetFriendID(u uuid.UUID) *FriendUpdateOne {
	fuo.mutation.SetFriendID(u)
	return fuo
}

// SetSince sets the "since" field.
func (fuo *FriendUpdateOne) SetSince(t time.Time) *FriendUpdateOne {
	fuo.mutation.SetSince(t)
	return fuo
}

// SetAccepted sets the "accepted" field.
func (fuo *FriendUpdateOne) SetAccepted(b bool) *FriendUpdateOne {
	fuo.mutation.SetAccepted(b)
	return fuo
}

// SetProfile sets the "profile" edge to the Profile entity.
func (fuo *FriendUpdateOne) SetProfile(p *Profile) *FriendUpdateOne {
	return fuo.SetProfileID(p.ID)
}

// SetFriend sets the "friend" edge to the Profile entity.
func (fuo *FriendUpdateOne) SetFriend(p *Profile) *FriendUpdateOne {
	return fuo.SetFriendID(p.ID)
}

// Mutation returns the FriendMutation object of the builder.
func (fuo *FriendUpdateOne) Mutation() *FriendMutation {
	return fuo.mutation
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (fuo *FriendUpdateOne) ClearProfile() *FriendUpdateOne {
	fuo.mutation.ClearProfile()
	return fuo
}

// ClearFriend clears the "friend" edge to the Profile entity.
func (fuo *FriendUpdateOne) ClearFriend() *FriendUpdateOne {
	fuo.mutation.ClearFriend()
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FriendUpdateOne) Select(field string, fields ...string) *FriendUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Friend entity.
func (fuo *FriendUpdateOne) Save(ctx context.Context) (*Friend, error) {
	return withHooks[*Friend, FriendMutation](ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FriendUpdateOne) SaveX(ctx context.Context) *Friend {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FriendUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FriendUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FriendUpdateOne) check() error {
	if _, ok := fuo.mutation.ProfileID(); fuo.mutation.ProfileCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Friend.profile"`)
	}
	if _, ok := fuo.mutation.FriendID(); fuo.mutation.FriendCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Friend.friend"`)
	}
	return nil
}

func (fuo *FriendUpdateOne) sqlSave(ctx context.Context) (_node *Friend, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   friend.Table,
			Columns: friend.Columns,
			CompositeID: []*sqlgraph.FieldSpec{
				{
					Type:   field.TypeUUID,
					Column: friend.FieldProfileID,
				},
				{
					Type:   field.TypeUUID,
					Column: friend.FieldFriendID,
				},
			},
		},
	}
	if id, ok := fuo.mutation.ProfileID(); !ok {
		return nil, &ValidationError{Name: "profile_id", err: errors.New(`ent: missing "Friend.profile_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := fuo.mutation.FriendID(); !ok {
		return nil, &ValidationError{Name: "friend_id", err: errors.New(`ent: missing "Friend.friend_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !friend.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Since(); ok {
		_spec.SetField(friend.FieldSince, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.Accepted(); ok {
		_spec.SetField(friend.FieldAccepted, field.TypeBool, value)
	}
	if fuo.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   friend.ProfileTable,
			Columns: []string{friend.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   friend.ProfileTable,
			Columns: []string{friend.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.FriendCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   friend.FriendTable,
			Columns: []string{friend.FriendColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.FriendIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   friend.FriendTable,
			Columns: []string{friend.FriendColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Friend{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{friend.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
