// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/abc3354/CODEV-back/ent/predicate"
	"github.com/abc3354/CODEV-back/ent/profile"
	"github.com/abc3354/CODEV-back/ent/reservation"
	"github.com/abc3354/CODEV-back/ent/salle"
	"github.com/abc3354/CODEV-back/ent/salledisponible"
	"github.com/google/uuid"
)

// SalleQuery is the builder for querying Salle entities.
type SalleQuery struct {
	config
	limit                 *int
	offset                *int
	unique                *bool
	order                 []OrderFunc
	fields                []string
	inters                []Interceptor
	predicates            []predicate.Salle
	withProfilReservation *ProfileQuery
	withDisponibilite     *SalleDisponibleQuery
	withReservations      *ReservationQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SalleQuery builder.
func (sq *SalleQuery) Where(ps ...predicate.Salle) *SalleQuery {
	sq.predicates = append(sq.predicates, ps...)
	return sq
}

// Limit the number of records to be returned by this query.
func (sq *SalleQuery) Limit(limit int) *SalleQuery {
	sq.limit = &limit
	return sq
}

// Offset to start from.
func (sq *SalleQuery) Offset(offset int) *SalleQuery {
	sq.offset = &offset
	return sq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sq *SalleQuery) Unique(unique bool) *SalleQuery {
	sq.unique = &unique
	return sq
}

// Order specifies how the records should be ordered.
func (sq *SalleQuery) Order(o ...OrderFunc) *SalleQuery {
	sq.order = append(sq.order, o...)
	return sq
}

// QueryProfilReservation chains the current query on the "profil_reservation" edge.
func (sq *SalleQuery) QueryProfilReservation() *ProfileQuery {
	query := (&ProfileClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(salle.Table, salle.FieldID, selector),
			sqlgraph.To(profile.Table, profile.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, salle.ProfilReservationTable, salle.ProfilReservationPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDisponibilite chains the current query on the "disponibilite" edge.
func (sq *SalleQuery) QueryDisponibilite() *SalleDisponibleQuery {
	query := (&SalleDisponibleClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(salle.Table, salle.FieldID, selector),
			sqlgraph.To(salledisponible.Table, salledisponible.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, salle.DisponibiliteTable, salle.DisponibiliteColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReservations chains the current query on the "reservations" edge.
func (sq *SalleQuery) QueryReservations() *ReservationQuery {
	query := (&ReservationClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(salle.Table, salle.FieldID, selector),
			sqlgraph.To(reservation.Table, reservation.SalleColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, salle.ReservationsTable, salle.ReservationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Salle entity from the query.
// Returns a *NotFoundError when no Salle was found.
func (sq *SalleQuery) First(ctx context.Context) (*Salle, error) {
	nodes, err := sq.Limit(1).All(newQueryContext(ctx, TypeSalle, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{salle.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sq *SalleQuery) FirstX(ctx context.Context) *Salle {
	node, err := sq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Salle ID from the query.
// Returns a *NotFoundError when no Salle ID was found.
func (sq *SalleQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = sq.Limit(1).IDs(newQueryContext(ctx, TypeSalle, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{salle.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sq *SalleQuery) FirstIDX(ctx context.Context) int {
	id, err := sq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Salle entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Salle entity is found.
// Returns a *NotFoundError when no Salle entities are found.
func (sq *SalleQuery) Only(ctx context.Context) (*Salle, error) {
	nodes, err := sq.Limit(2).All(newQueryContext(ctx, TypeSalle, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{salle.Label}
	default:
		return nil, &NotSingularError{salle.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sq *SalleQuery) OnlyX(ctx context.Context) *Salle {
	node, err := sq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Salle ID in the query.
// Returns a *NotSingularError when more than one Salle ID is found.
// Returns a *NotFoundError when no entities are found.
func (sq *SalleQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = sq.Limit(2).IDs(newQueryContext(ctx, TypeSalle, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{salle.Label}
	default:
		err = &NotSingularError{salle.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sq *SalleQuery) OnlyIDX(ctx context.Context) int {
	id, err := sq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Salles.
func (sq *SalleQuery) All(ctx context.Context) ([]*Salle, error) {
	ctx = newQueryContext(ctx, TypeSalle, "All")
	if err := sq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Salle, *SalleQuery]()
	return withInterceptors[[]*Salle](ctx, sq, qr, sq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sq *SalleQuery) AllX(ctx context.Context) []*Salle {
	nodes, err := sq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Salle IDs.
func (sq *SalleQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	ctx = newQueryContext(ctx, TypeSalle, "IDs")
	if err := sq.Select(salle.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sq *SalleQuery) IDsX(ctx context.Context) []int {
	ids, err := sq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sq *SalleQuery) Count(ctx context.Context) (int, error) {
	ctx = newQueryContext(ctx, TypeSalle, "Count")
	if err := sq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sq, querierCount[*SalleQuery](), sq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sq *SalleQuery) CountX(ctx context.Context) int {
	count, err := sq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sq *SalleQuery) Exist(ctx context.Context) (bool, error) {
	ctx = newQueryContext(ctx, TypeSalle, "Exist")
	switch _, err := sq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sq *SalleQuery) ExistX(ctx context.Context) bool {
	exist, err := sq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SalleQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sq *SalleQuery) Clone() *SalleQuery {
	if sq == nil {
		return nil
	}
	return &SalleQuery{
		config:                sq.config,
		limit:                 sq.limit,
		offset:                sq.offset,
		order:                 append([]OrderFunc{}, sq.order...),
		inters:                append([]Interceptor{}, sq.inters...),
		predicates:            append([]predicate.Salle{}, sq.predicates...),
		withProfilReservation: sq.withProfilReservation.Clone(),
		withDisponibilite:     sq.withDisponibilite.Clone(),
		withReservations:      sq.withReservations.Clone(),
		// clone intermediate query.
		sql:    sq.sql.Clone(),
		path:   sq.path,
		unique: sq.unique,
	}
}

// WithProfilReservation tells the query-builder to eager-load the nodes that are connected to
// the "profil_reservation" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SalleQuery) WithProfilReservation(opts ...func(*ProfileQuery)) *SalleQuery {
	query := (&ProfileClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withProfilReservation = query
	return sq
}

// WithDisponibilite tells the query-builder to eager-load the nodes that are connected to
// the "disponibilite" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SalleQuery) WithDisponibilite(opts ...func(*SalleDisponibleQuery)) *SalleQuery {
	query := (&SalleDisponibleClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withDisponibilite = query
	return sq
}

// WithReservations tells the query-builder to eager-load the nodes that are connected to
// the "reservations" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SalleQuery) WithReservations(opts ...func(*ReservationQuery)) *SalleQuery {
	query := (&ReservationClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withReservations = query
	return sq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Nom string `json:"nom,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Salle.Query().
//		GroupBy(salle.FieldNom).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sq *SalleQuery) GroupBy(field string, fields ...string) *SalleGroupBy {
	sq.fields = append([]string{field}, fields...)
	grbuild := &SalleGroupBy{build: sq}
	grbuild.flds = &sq.fields
	grbuild.label = salle.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Nom string `json:"nom,omitempty"`
//	}
//
//	client.Salle.Query().
//		Select(salle.FieldNom).
//		Scan(ctx, &v)
func (sq *SalleQuery) Select(fields ...string) *SalleSelect {
	sq.fields = append(sq.fields, fields...)
	sbuild := &SalleSelect{SalleQuery: sq}
	sbuild.label = salle.Label
	sbuild.flds, sbuild.scan = &sq.fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SalleSelect configured with the given aggregations.
func (sq *SalleQuery) Aggregate(fns ...AggregateFunc) *SalleSelect {
	return sq.Select().Aggregate(fns...)
}

func (sq *SalleQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sq); err != nil {
				return err
			}
		}
	}
	for _, f := range sq.fields {
		if !salle.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sq.path != nil {
		prev, err := sq.path(ctx)
		if err != nil {
			return err
		}
		sq.sql = prev
	}
	return nil
}

func (sq *SalleQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Salle, error) {
	var (
		nodes       = []*Salle{}
		_spec       = sq.querySpec()
		loadedTypes = [3]bool{
			sq.withProfilReservation != nil,
			sq.withDisponibilite != nil,
			sq.withReservations != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Salle).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Salle{config: sq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sq.withProfilReservation; query != nil {
		if err := sq.loadProfilReservation(ctx, query, nodes,
			func(n *Salle) { n.Edges.ProfilReservation = []*Profile{} },
			func(n *Salle, e *Profile) { n.Edges.ProfilReservation = append(n.Edges.ProfilReservation, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withDisponibilite; query != nil {
		if err := sq.loadDisponibilite(ctx, query, nodes,
			func(n *Salle) { n.Edges.Disponibilite = []*SalleDisponible{} },
			func(n *Salle, e *SalleDisponible) { n.Edges.Disponibilite = append(n.Edges.Disponibilite, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withReservations; query != nil {
		if err := sq.loadReservations(ctx, query, nodes,
			func(n *Salle) { n.Edges.Reservations = []*Reservation{} },
			func(n *Salle, e *Reservation) { n.Edges.Reservations = append(n.Edges.Reservations, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sq *SalleQuery) loadProfilReservation(ctx context.Context, query *ProfileQuery, nodes []*Salle, init func(*Salle), assign func(*Salle, *Profile)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Salle)
	nids := make(map[uuid.UUID]map[*Salle]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(salle.ProfilReservationTable)
		s.Join(joinT).On(s.C(profile.FieldID), joinT.C(salle.ProfilReservationPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(salle.ProfilReservationPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(salle.ProfilReservationPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := int(values[0].(*sql.NullInt64).Int64)
			inValue := *values[1].(*uuid.UUID)
			if nids[inValue] == nil {
				nids[inValue] = map[*Salle]struct{}{byID[outValue]: {}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "profil_reservation" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (sq *SalleQuery) loadDisponibilite(ctx context.Context, query *SalleDisponibleQuery, nodes []*Salle, init func(*Salle), assign func(*Salle, *SalleDisponible)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Salle)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.SalleDisponible(func(s *sql.Selector) {
		s.Where(sql.InValues(salle.DisponibiliteColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.salle_disponibilite
		if fk == nil {
			return fmt.Errorf(`foreign-key "salle_disponibilite" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "salle_disponibilite" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *SalleQuery) loadReservations(ctx context.Context, query *ReservationQuery, nodes []*Salle, init func(*Salle), assign func(*Salle, *Reservation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Salle)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.InValues(salle.ReservationsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.SalleID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "salle_id" returned %v for node %v`, fk, n)
		}
		assign(node, n)
	}
	return nil
}

func (sq *SalleQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sq.querySpec()
	_spec.Node.Columns = sq.fields
	if len(sq.fields) > 0 {
		_spec.Unique = sq.unique != nil && *sq.unique
	}
	return sqlgraph.CountNodes(ctx, sq.driver, _spec)
}

func (sq *SalleQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   salle.Table,
			Columns: salle.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: salle.FieldID,
			},
		},
		From:   sq.sql,
		Unique: true,
	}
	if unique := sq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := sq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, salle.FieldID)
		for i := range fields {
			if fields[i] != salle.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := sq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sq *SalleQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sq.driver.Dialect())
	t1 := builder.Table(salle.Table)
	columns := sq.fields
	if len(columns) == 0 {
		columns = salle.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sq.sql != nil {
		selector = sq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sq.unique != nil && *sq.unique {
		selector.Distinct()
	}
	for _, p := range sq.predicates {
		p(selector)
	}
	for _, p := range sq.order {
		p(selector)
	}
	if offset := sq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SalleGroupBy is the group-by builder for Salle entities.
type SalleGroupBy struct {
	selector
	build *SalleQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sgb *SalleGroupBy) Aggregate(fns ...AggregateFunc) *SalleGroupBy {
	sgb.fns = append(sgb.fns, fns...)
	return sgb
}

// Scan applies the selector query and scans the result into the given value.
func (sgb *SalleGroupBy) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeSalle, "GroupBy")
	if err := sgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SalleQuery, *SalleGroupBy](ctx, sgb.build, sgb, sgb.build.inters, v)
}

func (sgb *SalleGroupBy) sqlScan(ctx context.Context, root *SalleQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sgb.fns))
	for _, fn := range sgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sgb.flds)+len(sgb.fns))
		for _, f := range *sgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SalleSelect is the builder for selecting fields of Salle entities.
type SalleSelect struct {
	*SalleQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ss *SalleSelect) Aggregate(fns ...AggregateFunc) *SalleSelect {
	ss.fns = append(ss.fns, fns...)
	return ss
}

// Scan applies the selector query and scans the result into the given value.
func (ss *SalleSelect) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeSalle, "Select")
	if err := ss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SalleQuery, *SalleSelect](ctx, ss.SalleQuery, ss, ss.inters, v)
}

func (ss *SalleSelect) sqlScan(ctx context.Context, root *SalleQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ss.fns))
	for _, fn := range ss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
