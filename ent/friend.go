// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/abc3354/CODEV-back/ent/friend"
	"github.com/abc3354/CODEV-back/ent/profile"
	"github.com/google/uuid"
)

// Friend is the model entity for the Friend schema.
type Friend struct {
	config `json:"-"`
	// ProfileID holds the value of the "profile_id" field.
	ProfileID uuid.UUID `json:"profile_id,omitempty"`
	// FriendID holds the value of the "friend_id" field.
	FriendID uuid.UUID `json:"friend_id,omitempty"`
	// Since holds the value of the "since" field.
	Since time.Time `json:"since,omitempty"`
	// Accepted holds the value of the "accepted" field.
	Accepted bool `json:"accepted,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FriendQuery when eager-loading is set.
	Edges FriendEdges `json:"edges"`
}

// FriendEdges holds the relations/edges for other nodes in the graph.
type FriendEdges struct {
	// Profile holds the value of the profile edge.
	Profile *Profile `json:"profile,omitempty"`
	// Friend holds the value of the friend edge.
	Friend *Profile `json:"friend,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProfileOrErr returns the Profile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FriendEdges) ProfileOrErr() (*Profile, error) {
	if e.loadedTypes[0] {
		if e.Profile == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: profile.Label}
		}
		return e.Profile, nil
	}
	return nil, &NotLoadedError{edge: "profile"}
}

// FriendOrErr returns the Friend value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FriendEdges) FriendOrErr() (*Profile, error) {
	if e.loadedTypes[1] {
		if e.Friend == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: profile.Label}
		}
		return e.Friend, nil
	}
	return nil, &NotLoadedError{edge: "friend"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Friend) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case friend.FieldAccepted:
			values[i] = new(sql.NullBool)
		case friend.FieldSince:
			values[i] = new(sql.NullTime)
		case friend.FieldProfileID, friend.FieldFriendID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Friend", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Friend fields.
func (f *Friend) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case friend.FieldProfileID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field profile_id", values[i])
			} else if value != nil {
				f.ProfileID = *value
			}
		case friend.FieldFriendID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field friend_id", values[i])
			} else if value != nil {
				f.FriendID = *value
			}
		case friend.FieldSince:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field since", values[i])
			} else if value.Valid {
				f.Since = value.Time
			}
		case friend.FieldAccepted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field accepted", values[i])
			} else if value.Valid {
				f.Accepted = value.Bool
			}
		}
	}
	return nil
}

// QueryProfile queries the "profile" edge of the Friend entity.
func (f *Friend) QueryProfile() *ProfileQuery {
	return (&FriendClient{config: f.config}).QueryProfile(f)
}

// QueryFriend queries the "friend" edge of the Friend entity.
func (f *Friend) QueryFriend() *ProfileQuery {
	return (&FriendClient{config: f.config}).QueryFriend(f)
}

// Update returns a builder for updating this Friend.
// Note that you need to call Friend.Unwrap() before calling this method if this Friend
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Friend) Update() *FriendUpdateOne {
	return (&FriendClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the Friend entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Friend) Unwrap() *Friend {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Friend is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Friend) String() string {
	var builder strings.Builder
	builder.WriteString("Friend(")
	builder.WriteString("profile_id=")
	builder.WriteString(fmt.Sprintf("%v", f.ProfileID))
	builder.WriteString(", ")
	builder.WriteString("friend_id=")
	builder.WriteString(fmt.Sprintf("%v", f.FriendID))
	builder.WriteString(", ")
	builder.WriteString("since=")
	builder.WriteString(f.Since.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("accepted=")
	builder.WriteString(fmt.Sprintf("%v", f.Accepted))
	builder.WriteByte(')')
	return builder.String()
}

// Friends is a parsable slice of Friend.
type Friends []*Friend

func (f Friends) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
