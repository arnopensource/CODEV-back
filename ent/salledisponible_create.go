// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/abc3354/CODEV-back/ent/salle"
	"github.com/abc3354/CODEV-back/ent/salledisponible"
)

// SalleDisponibleCreate is the builder for creating a SalleDisponible entity.
type SalleDisponibleCreate struct {
	config
	mutation *SalleDisponibleMutation
	hooks    []Hook
}

// SetIDSalle sets the "id_salle" field.
func (sdc *SalleDisponibleCreate) SetIDSalle(s string) *SalleDisponibleCreate {
	sdc.mutation.SetIDSalle(s)
	return sdc
}

// SetStart sets the "start" field.
func (sdc *SalleDisponibleCreate) SetStart(t time.Time) *SalleDisponibleCreate {
	sdc.mutation.SetStart(t)
	return sdc
}

// SetEnd sets the "end" field.
func (sdc *SalleDisponibleCreate) SetEnd(t time.Time) *SalleDisponibleCreate {
	sdc.mutation.SetEnd(t)
	return sdc
}

// SetSalleID sets the "salle" edge to the Salle entity by ID.
func (sdc *SalleDisponibleCreate) SetSalleID(id int) *SalleDisponibleCreate {
	sdc.mutation.SetSalleID(id)
	return sdc
}

// SetNillableSalleID sets the "salle" edge to the Salle entity by ID if the given value is not nil.
func (sdc *SalleDisponibleCreate) SetNillableSalleID(id *int) *SalleDisponibleCreate {
	if id != nil {
		sdc = sdc.SetSalleID(*id)
	}
	return sdc
}

// SetSalle sets the "salle" edge to the Salle entity.
func (sdc *SalleDisponibleCreate) SetSalle(s *Salle) *SalleDisponibleCreate {
	return sdc.SetSalleID(s.ID)
}

// Mutation returns the SalleDisponibleMutation object of the builder.
func (sdc *SalleDisponibleCreate) Mutation() *SalleDisponibleMutation {
	return sdc.mutation
}

// Save creates the SalleDisponible in the database.
func (sdc *SalleDisponibleCreate) Save(ctx context.Context) (*SalleDisponible, error) {
	return withHooks[*SalleDisponible, SalleDisponibleMutation](ctx, sdc.sqlSave, sdc.mutation, sdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sdc *SalleDisponibleCreate) SaveX(ctx context.Context) *SalleDisponible {
	v, err := sdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sdc *SalleDisponibleCreate) Exec(ctx context.Context) error {
	_, err := sdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdc *SalleDisponibleCreate) ExecX(ctx context.Context) {
	if err := sdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sdc *SalleDisponibleCreate) check() error {
	if _, ok := sdc.mutation.IDSalle(); !ok {
		return &ValidationError{Name: "id_salle", err: errors.New(`ent: missing required field "SalleDisponible.id_salle"`)}
	}
	if _, ok := sdc.mutation.Start(); !ok {
		return &ValidationError{Name: "start", err: errors.New(`ent: missing required field "SalleDisponible.start"`)}
	}
	if _, ok := sdc.mutation.End(); !ok {
		return &ValidationError{Name: "end", err: errors.New(`ent: missing required field "SalleDisponible.end"`)}
	}
	return nil
}

func (sdc *SalleDisponibleCreate) sqlSave(ctx context.Context) (*SalleDisponible, error) {
	if err := sdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sdc.mutation.id = &_node.ID
	sdc.mutation.done = true
	return _node, nil
}

func (sdc *SalleDisponibleCreate) createSpec() (*SalleDisponible, *sqlgraph.CreateSpec) {
	var (
		_node = &SalleDisponible{config: sdc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: salledisponible.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: salledisponible.FieldID,
			},
		}
	)
	if value, ok := sdc.mutation.IDSalle(); ok {
		_spec.SetField(salledisponible.FieldIDSalle, field.TypeString, value)
		_node.IDSalle = value
	}
	if value, ok := sdc.mutation.Start(); ok {
		_spec.SetField(salledisponible.FieldStart, field.TypeTime, value)
		_node.Start = value
	}
	if value, ok := sdc.mutation.End(); ok {
		_spec.SetField(salledisponible.FieldEnd, field.TypeTime, value)
		_node.End = value
	}
	if nodes := sdc.mutation.SalleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   salledisponible.SalleTable,
			Columns: []string{salledisponible.SalleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: salle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.salle_disponibilite = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SalleDisponibleCreateBulk is the builder for creating many SalleDisponible entities in bulk.
type SalleDisponibleCreateBulk struct {
	config
	builders []*SalleDisponibleCreate
}

// Save creates the SalleDisponible entities in the database.
func (sdcb *SalleDisponibleCreateBulk) Save(ctx context.Context) ([]*SalleDisponible, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sdcb.builders))
	nodes := make([]*SalleDisponible, len(sdcb.builders))
	mutators := make([]Mutator, len(sdcb.builders))
	for i := range sdcb.builders {
		func(i int, root context.Context) {
			builder := sdcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SalleDisponibleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sdcb *SalleDisponibleCreateBulk) SaveX(ctx context.Context) []*SalleDisponible {
	v, err := sdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sdcb *SalleDisponibleCreateBulk) Exec(ctx context.Context) error {
	_, err := sdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdcb *SalleDisponibleCreateBulk) ExecX(ctx context.Context) {
	if err := sdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
