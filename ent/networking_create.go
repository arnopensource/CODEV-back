// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/abc3354/CODEV-back/ent/networking"
	"github.com/abc3354/CODEV-back/ent/profile"
	"github.com/google/uuid"
)

// NetworkingCreate is the builder for creating a Networking entity.
type NetworkingCreate struct {
	config
	mutation *NetworkingMutation
	hooks    []Hook
}

// SetProfileID sets the "profile_id" field.
func (nc *NetworkingCreate) SetProfileID(u uuid.UUID) *NetworkingCreate {
	nc.mutation.SetProfileID(u)
	return nc
}

// SetFriendID sets the "friend_id" field.
func (nc *NetworkingCreate) SetFriendID(u uuid.UUID) *NetworkingCreate {
	nc.mutation.SetFriendID(u)
	return nc
}

// SetCreatedAt sets the "created_at" field.
func (nc *NetworkingCreate) SetCreatedAt(t time.Time) *NetworkingCreate {
	nc.mutation.SetCreatedAt(t)
	return nc
}

// SetAccepted sets the "accepted" field.
func (nc *NetworkingCreate) SetAccepted(b bool) *NetworkingCreate {
	nc.mutation.SetAccepted(b)
	return nc
}

// SetProfile sets the "profile" edge to the Profile entity.
func (nc *NetworkingCreate) SetProfile(p *Profile) *NetworkingCreate {
	return nc.SetProfileID(p.ID)
}

// SetFriend sets the "friend" edge to the Profile entity.
func (nc *NetworkingCreate) SetFriend(p *Profile) *NetworkingCreate {
	return nc.SetFriendID(p.ID)
}

// Mutation returns the NetworkingMutation object of the builder.
func (nc *NetworkingCreate) Mutation() *NetworkingMutation {
	return nc.mutation
}

// Save creates the Networking in the database.
func (nc *NetworkingCreate) Save(ctx context.Context) (*Networking, error) {
	return withHooks[*Networking, NetworkingMutation](ctx, nc.sqlSave, nc.mutation, nc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nc *NetworkingCreate) SaveX(ctx context.Context) *Networking {
	v, err := nc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nc *NetworkingCreate) Exec(ctx context.Context) error {
	_, err := nc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nc *NetworkingCreate) ExecX(ctx context.Context) {
	if err := nc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nc *NetworkingCreate) check() error {
	if _, ok := nc.mutation.ProfileID(); !ok {
		return &ValidationError{Name: "profile_id", err: errors.New(`ent: missing required field "Networking.profile_id"`)}
	}
	if _, ok := nc.mutation.FriendID(); !ok {
		return &ValidationError{Name: "friend_id", err: errors.New(`ent: missing required field "Networking.friend_id"`)}
	}
	if _, ok := nc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Networking.created_at"`)}
	}
	if _, ok := nc.mutation.Accepted(); !ok {
		return &ValidationError{Name: "accepted", err: errors.New(`ent: missing required field "Networking.accepted"`)}
	}
	if _, ok := nc.mutation.ProfileID(); !ok {
		return &ValidationError{Name: "profile", err: errors.New(`ent: missing required edge "Networking.profile"`)}
	}
	if _, ok := nc.mutation.FriendID(); !ok {
		return &ValidationError{Name: "friend", err: errors.New(`ent: missing required edge "Networking.friend"`)}
	}
	return nil
}

func (nc *NetworkingCreate) sqlSave(ctx context.Context) (*Networking, error) {
	if err := nc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (nc *NetworkingCreate) createSpec() (*Networking, *sqlgraph.CreateSpec) {
	var (
		_node = &Networking{config: nc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: networking.Table,
		}
	)
	if value, ok := nc.mutation.CreatedAt(); ok {
		_spec.SetField(networking.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := nc.mutation.Accepted(); ok {
		_spec.SetField(networking.FieldAccepted, field.TypeBool, value)
		_node.Accepted = value
	}
	if nodes := nc.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   networking.ProfileTable,
			Columns: []string{networking.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProfileID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nc.mutation.FriendIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   networking.FriendTable,
			Columns: []string{networking.FriendColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FriendID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NetworkingCreateBulk is the builder for creating many Networking entities in bulk.
type NetworkingCreateBulk struct {
	config
	builders []*NetworkingCreate
}

// Save creates the Networking entities in the database.
func (ncb *NetworkingCreateBulk) Save(ctx context.Context) ([]*Networking, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ncb.builders))
	nodes := make([]*Networking, len(ncb.builders))
	mutators := make([]Mutator, len(ncb.builders))
	for i := range ncb.builders {
		func(i int, root context.Context) {
			builder := ncb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NetworkingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ncb *NetworkingCreateBulk) SaveX(ctx context.Context) []*Networking {
	v, err := ncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncb *NetworkingCreateBulk) Exec(ctx context.Context) error {
	_, err := ncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncb *NetworkingCreateBulk) ExecX(ctx context.Context) {
	if err := ncb.Exec(ctx); err != nil {
		panic(err)
	}
}
