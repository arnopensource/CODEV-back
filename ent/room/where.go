// Code generated by ent, DO NOT EDIT.

package room

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/abc3354/CODEV-back/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Room {
	return predicate.Room(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Room {
	return predicate.Room(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Room {
	return predicate.Room(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Room {
	return predicate.Room(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Room {
	return predicate.Room(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Room {
	return predicate.Room(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Room {
	return predicate.Room(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldName, v))
}

// Floor applies equality check predicate on the "floor" field. It's identical to FloorEQ.
func Floor(v string) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldFloor, v))
}

// Building applies equality check predicate on the "building" field. It's identical to BuildingEQ.
func Building(v string) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldBuilding, v))
}

// Capacity applies equality check predicate on the "capacity" field. It's identical to CapacityEQ.
func Capacity(v int) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldCapacity, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Room {
	return predicate.Room(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Room {
	return predicate.Room(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Room {
	return predicate.Room(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Room {
	return predicate.Room(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Room {
	return predicate.Room(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Room {
	return predicate.Room(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Room {
	return predicate.Room(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Room {
	return predicate.Room(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Room {
	return predicate.Room(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Room {
	return predicate.Room(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Room {
	return predicate.Room(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Room {
	return predicate.Room(sql.FieldContainsFold(FieldName, v))
}

// FloorEQ applies the EQ predicate on the "floor" field.
func FloorEQ(v string) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldFloor, v))
}

// FloorNEQ applies the NEQ predicate on the "floor" field.
func FloorNEQ(v string) predicate.Room {
	return predicate.Room(sql.FieldNEQ(FieldFloor, v))
}

// FloorIn applies the In predicate on the "floor" field.
func FloorIn(vs ...string) predicate.Room {
	return predicate.Room(sql.FieldIn(FieldFloor, vs...))
}

// FloorNotIn applies the NotIn predicate on the "floor" field.
func FloorNotIn(vs ...string) predicate.Room {
	return predicate.Room(sql.FieldNotIn(FieldFloor, vs...))
}

// FloorGT applies the GT predicate on the "floor" field.
func FloorGT(v string) predicate.Room {
	return predicate.Room(sql.FieldGT(FieldFloor, v))
}

// FloorGTE applies the GTE predicate on the "floor" field.
func FloorGTE(v string) predicate.Room {
	return predicate.Room(sql.FieldGTE(FieldFloor, v))
}

// FloorLT applies the LT predicate on the "floor" field.
func FloorLT(v string) predicate.Room {
	return predicate.Room(sql.FieldLT(FieldFloor, v))
}

// FloorLTE applies the LTE predicate on the "floor" field.
func FloorLTE(v string) predicate.Room {
	return predicate.Room(sql.FieldLTE(FieldFloor, v))
}

// FloorContains applies the Contains predicate on the "floor" field.
func FloorContains(v string) predicate.Room {
	return predicate.Room(sql.FieldContains(FieldFloor, v))
}

// FloorHasPrefix applies the HasPrefix predicate on the "floor" field.
func FloorHasPrefix(v string) predicate.Room {
	return predicate.Room(sql.FieldHasPrefix(FieldFloor, v))
}

// FloorHasSuffix applies the HasSuffix predicate on the "floor" field.
func FloorHasSuffix(v string) predicate.Room {
	return predicate.Room(sql.FieldHasSuffix(FieldFloor, v))
}

// FloorEqualFold applies the EqualFold predicate on the "floor" field.
func FloorEqualFold(v string) predicate.Room {
	return predicate.Room(sql.FieldEqualFold(FieldFloor, v))
}

// FloorContainsFold applies the ContainsFold predicate on the "floor" field.
func FloorContainsFold(v string) predicate.Room {
	return predicate.Room(sql.FieldContainsFold(FieldFloor, v))
}

// BuildingEQ applies the EQ predicate on the "building" field.
func BuildingEQ(v string) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldBuilding, v))
}

// BuildingNEQ applies the NEQ predicate on the "building" field.
func BuildingNEQ(v string) predicate.Room {
	return predicate.Room(sql.FieldNEQ(FieldBuilding, v))
}

// BuildingIn applies the In predicate on the "building" field.
func BuildingIn(vs ...string) predicate.Room {
	return predicate.Room(sql.FieldIn(FieldBuilding, vs...))
}

// BuildingNotIn applies the NotIn predicate on the "building" field.
func BuildingNotIn(vs ...string) predicate.Room {
	return predicate.Room(sql.FieldNotIn(FieldBuilding, vs...))
}

// BuildingGT applies the GT predicate on the "building" field.
func BuildingGT(v string) predicate.Room {
	return predicate.Room(sql.FieldGT(FieldBuilding, v))
}

// BuildingGTE applies the GTE predicate on the "building" field.
func BuildingGTE(v string) predicate.Room {
	return predicate.Room(sql.FieldGTE(FieldBuilding, v))
}

// BuildingLT applies the LT predicate on the "building" field.
func BuildingLT(v string) predicate.Room {
	return predicate.Room(sql.FieldLT(FieldBuilding, v))
}

// BuildingLTE applies the LTE predicate on the "building" field.
func BuildingLTE(v string) predicate.Room {
	return predicate.Room(sql.FieldLTE(FieldBuilding, v))
}

// BuildingContains applies the Contains predicate on the "building" field.
func BuildingContains(v string) predicate.Room {
	return predicate.Room(sql.FieldContains(FieldBuilding, v))
}

// BuildingHasPrefix applies the HasPrefix predicate on the "building" field.
func BuildingHasPrefix(v string) predicate.Room {
	return predicate.Room(sql.FieldHasPrefix(FieldBuilding, v))
}

// BuildingHasSuffix applies the HasSuffix predicate on the "building" field.
func BuildingHasSuffix(v string) predicate.Room {
	return predicate.Room(sql.FieldHasSuffix(FieldBuilding, v))
}

// BuildingEqualFold applies the EqualFold predicate on the "building" field.
func BuildingEqualFold(v string) predicate.Room {
	return predicate.Room(sql.FieldEqualFold(FieldBuilding, v))
}

// BuildingContainsFold applies the ContainsFold predicate on the "building" field.
func BuildingContainsFold(v string) predicate.Room {
	return predicate.Room(sql.FieldContainsFold(FieldBuilding, v))
}

// CapacityEQ applies the EQ predicate on the "capacity" field.
func CapacityEQ(v int) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldCapacity, v))
}

// CapacityNEQ applies the NEQ predicate on the "capacity" field.
func CapacityNEQ(v int) predicate.Room {
	return predicate.Room(sql.FieldNEQ(FieldCapacity, v))
}

// CapacityIn applies the In predicate on the "capacity" field.
func CapacityIn(vs ...int) predicate.Room {
	return predicate.Room(sql.FieldIn(FieldCapacity, vs...))
}

// CapacityNotIn applies the NotIn predicate on the "capacity" field.
func CapacityNotIn(vs ...int) predicate.Room {
	return predicate.Room(sql.FieldNotIn(FieldCapacity, vs...))
}

// CapacityGT applies the GT predicate on the "capacity" field.
func CapacityGT(v int) predicate.Room {
	return predicate.Room(sql.FieldGT(FieldCapacity, v))
}

// CapacityGTE applies the GTE predicate on the "capacity" field.
func CapacityGTE(v int) predicate.Room {
	return predicate.Room(sql.FieldGTE(FieldCapacity, v))
}

// CapacityLT applies the LT predicate on the "capacity" field.
func CapacityLT(v int) predicate.Room {
	return predicate.Room(sql.FieldLT(FieldCapacity, v))
}

// CapacityLTE applies the LTE predicate on the "capacity" field.
func CapacityLTE(v int) predicate.Room {
	return predicate.Room(sql.FieldLTE(FieldCapacity, v))
}

// HasBookings applies the HasEdge predicate on the "bookings" edge.
func HasBookings() predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, BookingsTable, BookingsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBookingsWith applies the HasEdge predicate on the "bookings" edge with a given conditions (other predicates).
func HasBookingsWith(preds ...predicate.Profile) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BookingsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, BookingsTable, BookingsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAvailability applies the HasEdge predicate on the "availability" edge.
func HasAvailability() predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AvailabilityTable, AvailabilityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAvailabilityWith applies the HasEdge predicate on the "availability" edge with a given conditions (other predicates).
func HasAvailabilityWith(preds ...predicate.AvailableRoom) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AvailabilityInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AvailabilityTable, AvailabilityColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBookingsData applies the HasEdge predicate on the "bookings_data" edge.
func HasBookingsData() predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, BookingsDataTable, BookingsDataColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBookingsDataWith applies the HasEdge predicate on the "bookings_data" edge with a given conditions (other predicates).
func HasBookingsDataWith(preds ...predicate.Booking) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BookingsDataInverseTable, BookingsDataColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, BookingsDataTable, BookingsDataColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Room) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Room) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Room) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		p(s.Not())
	})
}
