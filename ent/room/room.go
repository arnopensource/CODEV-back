// Code generated by ent, DO NOT EDIT.

package room

const (
	// Label holds the string label denoting the room type in the database.
	Label = "room"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldFloor holds the string denoting the floor field in the database.
	FieldFloor = "floor"
	// FieldBuilding holds the string denoting the building field in the database.
	FieldBuilding = "building"
	// FieldCapacity holds the string denoting the capacity field in the database.
	FieldCapacity = "capacity"
	// EdgeBookings holds the string denoting the bookings edge name in mutations.
	EdgeBookings = "bookings"
	// EdgeAvailability holds the string denoting the availability edge name in mutations.
	EdgeAvailability = "availability"
	// EdgeEvents holds the string denoting the events edge name in mutations.
	EdgeEvents = "events"
	// EdgeBookingsData holds the string denoting the bookings_data edge name in mutations.
	EdgeBookingsData = "bookings_data"
	// Table holds the table name of the room in the database.
	Table = "rooms"
	// BookingsTable is the table that holds the bookings relation/edge. The primary key declared below.
	BookingsTable = "bookings"
	// BookingsInverseTable is the table name for the Profile entity.
	// It exists in this package in order to avoid circular dependency with the "profile" package.
	BookingsInverseTable = "profiles"
	// AvailabilityTable is the table that holds the availability relation/edge.
	AvailabilityTable = "available_rooms"
	// AvailabilityInverseTable is the table name for the AvailableRoom entity.
	// It exists in this package in order to avoid circular dependency with the "availableroom" package.
	AvailabilityInverseTable = "available_rooms"
	// AvailabilityColumn is the table column denoting the availability relation/edge.
	AvailabilityColumn = "room_availability"
	// EventsTable is the table that holds the events relation/edge.
	EventsTable = "events"
	// EventsInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	EventsInverseTable = "events"
	// EventsColumn is the table column denoting the events relation/edge.
	EventsColumn = "room_events"
	// BookingsDataTable is the table that holds the bookings_data relation/edge.
	BookingsDataTable = "bookings"
	// BookingsDataInverseTable is the table name for the Booking entity.
	// It exists in this package in order to avoid circular dependency with the "booking" package.
	BookingsDataInverseTable = "bookings"
	// BookingsDataColumn is the table column denoting the bookings_data relation/edge.
	BookingsDataColumn = "room_id"
)

// Columns holds all SQL columns for room fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldFloor,
	FieldBuilding,
	FieldCapacity,
}

var (
	// BookingsPrimaryKey and BookingsColumn2 are the table columns denoting the
	// primary key for the bookings relation (M2M).
	BookingsPrimaryKey = []string{"profile_id", "room_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
