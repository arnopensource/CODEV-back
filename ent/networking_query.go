// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/abc3354/CODEV-back/ent/networking"
	"github.com/abc3354/CODEV-back/ent/predicate"
	"github.com/abc3354/CODEV-back/ent/profile"
	"github.com/google/uuid"
)

// NetworkingQuery is the builder for querying Networking entities.
type NetworkingQuery struct {
	config
	limit       *int
	offset      *int
	unique      *bool
	order       []OrderFunc
	fields      []string
	inters      []Interceptor
	predicates  []predicate.Networking
	withProfile *ProfileQuery
	withFriend  *ProfileQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the NetworkingQuery builder.
func (nq *NetworkingQuery) Where(ps ...predicate.Networking) *NetworkingQuery {
	nq.predicates = append(nq.predicates, ps...)
	return nq
}

// Limit the number of records to be returned by this query.
func (nq *NetworkingQuery) Limit(limit int) *NetworkingQuery {
	nq.limit = &limit
	return nq
}

// Offset to start from.
func (nq *NetworkingQuery) Offset(offset int) *NetworkingQuery {
	nq.offset = &offset
	return nq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (nq *NetworkingQuery) Unique(unique bool) *NetworkingQuery {
	nq.unique = &unique
	return nq
}

// Order specifies how the records should be ordered.
func (nq *NetworkingQuery) Order(o ...OrderFunc) *NetworkingQuery {
	nq.order = append(nq.order, o...)
	return nq
}

// QueryProfile chains the current query on the "profile" edge.
func (nq *NetworkingQuery) QueryProfile() *ProfileQuery {
	query := (&ProfileClient{config: nq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := nq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := nq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(networking.Table, networking.ProfileColumn, selector),
			sqlgraph.To(profile.Table, profile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, networking.ProfileTable, networking.ProfileColumn),
		)
		fromU = sqlgraph.SetNeighbors(nq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFriend chains the current query on the "friend" edge.
func (nq *NetworkingQuery) QueryFriend() *ProfileQuery {
	query := (&ProfileClient{config: nq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := nq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := nq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(networking.Table, networking.FriendColumn, selector),
			sqlgraph.To(profile.Table, profile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, networking.FriendTable, networking.FriendColumn),
		)
		fromU = sqlgraph.SetNeighbors(nq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Networking entity from the query.
// Returns a *NotFoundError when no Networking was found.
func (nq *NetworkingQuery) First(ctx context.Context) (*Networking, error) {
	nodes, err := nq.Limit(1).All(newQueryContext(ctx, TypeNetworking, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{networking.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (nq *NetworkingQuery) FirstX(ctx context.Context) *Networking {
	node, err := nq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// Only returns a single Networking entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Networking entity is found.
// Returns a *NotFoundError when no Networking entities are found.
func (nq *NetworkingQuery) Only(ctx context.Context) (*Networking, error) {
	nodes, err := nq.Limit(2).All(newQueryContext(ctx, TypeNetworking, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{networking.Label}
	default:
		return nil, &NotSingularError{networking.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (nq *NetworkingQuery) OnlyX(ctx context.Context) *Networking {
	node, err := nq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// All executes the query and returns a list of Networkings.
func (nq *NetworkingQuery) All(ctx context.Context) ([]*Networking, error) {
	ctx = newQueryContext(ctx, TypeNetworking, "All")
	if err := nq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Networking, *NetworkingQuery]()
	return withInterceptors[[]*Networking](ctx, nq, qr, nq.inters)
}

// AllX is like All, but panics if an error occurs.
func (nq *NetworkingQuery) AllX(ctx context.Context) []*Networking {
	nodes, err := nq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// Count returns the count of the given query.
func (nq *NetworkingQuery) Count(ctx context.Context) (int, error) {
	ctx = newQueryContext(ctx, TypeNetworking, "Count")
	if err := nq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, nq, querierCount[*NetworkingQuery](), nq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (nq *NetworkingQuery) CountX(ctx context.Context) int {
	count, err := nq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (nq *NetworkingQuery) Exist(ctx context.Context) (bool, error) {
	ctx = newQueryContext(ctx, TypeNetworking, "Exist")
	switch _, err := nq.First(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (nq *NetworkingQuery) ExistX(ctx context.Context) bool {
	exist, err := nq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the NetworkingQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (nq *NetworkingQuery) Clone() *NetworkingQuery {
	if nq == nil {
		return nil
	}
	return &NetworkingQuery{
		config:      nq.config,
		limit:       nq.limit,
		offset:      nq.offset,
		order:       append([]OrderFunc{}, nq.order...),
		inters:      append([]Interceptor{}, nq.inters...),
		predicates:  append([]predicate.Networking{}, nq.predicates...),
		withProfile: nq.withProfile.Clone(),
		withFriend:  nq.withFriend.Clone(),
		// clone intermediate query.
		sql:    nq.sql.Clone(),
		path:   nq.path,
		unique: nq.unique,
	}
}

// WithProfile tells the query-builder to eager-load the nodes that are connected to
// the "profile" edge. The optional arguments are used to configure the query builder of the edge.
func (nq *NetworkingQuery) WithProfile(opts ...func(*ProfileQuery)) *NetworkingQuery {
	query := (&ProfileClient{config: nq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	nq.withProfile = query
	return nq
}

// WithFriend tells the query-builder to eager-load the nodes that are connected to
// the "friend" edge. The optional arguments are used to configure the query builder of the edge.
func (nq *NetworkingQuery) WithFriend(opts ...func(*ProfileQuery)) *NetworkingQuery {
	query := (&ProfileClient{config: nq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	nq.withFriend = query
	return nq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ProfileID uuid.UUID `json:"profile_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Networking.Query().
//		GroupBy(networking.FieldProfileID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (nq *NetworkingQuery) GroupBy(field string, fields ...string) *NetworkingGroupBy {
	nq.fields = append([]string{field}, fields...)
	grbuild := &NetworkingGroupBy{build: nq}
	grbuild.flds = &nq.fields
	grbuild.label = networking.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ProfileID uuid.UUID `json:"profile_id,omitempty"`
//	}
//
//	client.Networking.Query().
//		Select(networking.FieldProfileID).
//		Scan(ctx, &v)
func (nq *NetworkingQuery) Select(fields ...string) *NetworkingSelect {
	nq.fields = append(nq.fields, fields...)
	sbuild := &NetworkingSelect{NetworkingQuery: nq}
	sbuild.label = networking.Label
	sbuild.flds, sbuild.scan = &nq.fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a NetworkingSelect configured with the given aggregations.
func (nq *NetworkingQuery) Aggregate(fns ...AggregateFunc) *NetworkingSelect {
	return nq.Select().Aggregate(fns...)
}

func (nq *NetworkingQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range nq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, nq); err != nil {
				return err
			}
		}
	}
	for _, f := range nq.fields {
		if !networking.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if nq.path != nil {
		prev, err := nq.path(ctx)
		if err != nil {
			return err
		}
		nq.sql = prev
	}
	return nil
}

func (nq *NetworkingQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Networking, error) {
	var (
		nodes       = []*Networking{}
		_spec       = nq.querySpec()
		loadedTypes = [2]bool{
			nq.withProfile != nil,
			nq.withFriend != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Networking).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Networking{config: nq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, nq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := nq.withProfile; query != nil {
		if err := nq.loadProfile(ctx, query, nodes, nil,
			func(n *Networking, e *Profile) { n.Edges.Profile = e }); err != nil {
			return nil, err
		}
	}
	if query := nq.withFriend; query != nil {
		if err := nq.loadFriend(ctx, query, nodes, nil,
			func(n *Networking, e *Profile) { n.Edges.Friend = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (nq *NetworkingQuery) loadProfile(ctx context.Context, query *ProfileQuery, nodes []*Networking, init func(*Networking), assign func(*Networking, *Profile)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Networking)
	for i := range nodes {
		fk := nodes[i].ProfileID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(profile.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "profile_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (nq *NetworkingQuery) loadFriend(ctx context.Context, query *ProfileQuery, nodes []*Networking, init func(*Networking), assign func(*Networking, *Profile)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Networking)
	for i := range nodes {
		fk := nodes[i].FriendID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(profile.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "friend_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (nq *NetworkingQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := nq.querySpec()
	_spec.Unique = false
	_spec.Node.Columns = nil
	return sqlgraph.CountNodes(ctx, nq.driver, _spec)
}

func (nq *NetworkingQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   networking.Table,
			Columns: networking.Columns,
		},
		From:   nq.sql,
		Unique: true,
	}
	if unique := nq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := nq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		for i := range fields {
			_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
		}
	}
	if ps := nq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := nq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := nq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := nq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (nq *NetworkingQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(nq.driver.Dialect())
	t1 := builder.Table(networking.Table)
	columns := nq.fields
	if len(columns) == 0 {
		columns = networking.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if nq.sql != nil {
		selector = nq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if nq.unique != nil && *nq.unique {
		selector.Distinct()
	}
	for _, p := range nq.predicates {
		p(selector)
	}
	for _, p := range nq.order {
		p(selector)
	}
	if offset := nq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := nq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// NetworkingGroupBy is the group-by builder for Networking entities.
type NetworkingGroupBy struct {
	selector
	build *NetworkingQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ngb *NetworkingGroupBy) Aggregate(fns ...AggregateFunc) *NetworkingGroupBy {
	ngb.fns = append(ngb.fns, fns...)
	return ngb
}

// Scan applies the selector query and scans the result into the given value.
func (ngb *NetworkingGroupBy) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeNetworking, "GroupBy")
	if err := ngb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*NetworkingQuery, *NetworkingGroupBy](ctx, ngb.build, ngb, ngb.build.inters, v)
}

func (ngb *NetworkingGroupBy) sqlScan(ctx context.Context, root *NetworkingQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ngb.fns))
	for _, fn := range ngb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ngb.flds)+len(ngb.fns))
		for _, f := range *ngb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ngb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ngb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// NetworkingSelect is the builder for selecting fields of Networking entities.
type NetworkingSelect struct {
	*NetworkingQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ns *NetworkingSelect) Aggregate(fns ...AggregateFunc) *NetworkingSelect {
	ns.fns = append(ns.fns, fns...)
	return ns
}

// Scan applies the selector query and scans the result into the given value.
func (ns *NetworkingSelect) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeNetworking, "Select")
	if err := ns.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*NetworkingQuery, *NetworkingSelect](ctx, ns.NetworkingQuery, ns, ns.inters, v)
}

func (ns *NetworkingSelect) sqlScan(ctx context.Context, root *NetworkingQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ns.fns))
	for _, fn := range ns.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ns.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ns.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
