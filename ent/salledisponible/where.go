// Code generated by ent, DO NOT EDIT.

package salledisponible

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/abc3354/CODEV-back/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldLTE(FieldID, id))
}

// IDSalle applies equality check predicate on the "id_salle" field. It's identical to IDSalleEQ.
func IDSalle(v string) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldEQ(FieldIDSalle, v))
}

// Start applies equality check predicate on the "start" field. It's identical to StartEQ.
func Start(v time.Time) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldEQ(FieldStart, v))
}

// End applies equality check predicate on the "end" field. It's identical to EndEQ.
func End(v time.Time) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldEQ(FieldEnd, v))
}

// IDSalleEQ applies the EQ predicate on the "id_salle" field.
func IDSalleEQ(v string) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldEQ(FieldIDSalle, v))
}

// IDSalleNEQ applies the NEQ predicate on the "id_salle" field.
func IDSalleNEQ(v string) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldNEQ(FieldIDSalle, v))
}

// IDSalleIn applies the In predicate on the "id_salle" field.
func IDSalleIn(vs ...string) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldIn(FieldIDSalle, vs...))
}

// IDSalleNotIn applies the NotIn predicate on the "id_salle" field.
func IDSalleNotIn(vs ...string) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldNotIn(FieldIDSalle, vs...))
}

// IDSalleGT applies the GT predicate on the "id_salle" field.
func IDSalleGT(v string) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldGT(FieldIDSalle, v))
}

// IDSalleGTE applies the GTE predicate on the "id_salle" field.
func IDSalleGTE(v string) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldGTE(FieldIDSalle, v))
}

// IDSalleLT applies the LT predicate on the "id_salle" field.
func IDSalleLT(v string) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldLT(FieldIDSalle, v))
}

// IDSalleLTE applies the LTE predicate on the "id_salle" field.
func IDSalleLTE(v string) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldLTE(FieldIDSalle, v))
}

// IDSalleContains applies the Contains predicate on the "id_salle" field.
func IDSalleContains(v string) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldContains(FieldIDSalle, v))
}

// IDSalleHasPrefix applies the HasPrefix predicate on the "id_salle" field.
func IDSalleHasPrefix(v string) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldHasPrefix(FieldIDSalle, v))
}

// IDSalleHasSuffix applies the HasSuffix predicate on the "id_salle" field.
func IDSalleHasSuffix(v string) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldHasSuffix(FieldIDSalle, v))
}

// IDSalleEqualFold applies the EqualFold predicate on the "id_salle" field.
func IDSalleEqualFold(v string) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldEqualFold(FieldIDSalle, v))
}

// IDSalleContainsFold applies the ContainsFold predicate on the "id_salle" field.
func IDSalleContainsFold(v string) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldContainsFold(FieldIDSalle, v))
}

// StartEQ applies the EQ predicate on the "start" field.
func StartEQ(v time.Time) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldEQ(FieldStart, v))
}

// StartNEQ applies the NEQ predicate on the "start" field.
func StartNEQ(v time.Time) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldNEQ(FieldStart, v))
}

// StartIn applies the In predicate on the "start" field.
func StartIn(vs ...time.Time) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldIn(FieldStart, vs...))
}

// StartNotIn applies the NotIn predicate on the "start" field.
func StartNotIn(vs ...time.Time) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldNotIn(FieldStart, vs...))
}

// StartGT applies the GT predicate on the "start" field.
func StartGT(v time.Time) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldGT(FieldStart, v))
}

// StartGTE applies the GTE predicate on the "start" field.
func StartGTE(v time.Time) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldGTE(FieldStart, v))
}

// StartLT applies the LT predicate on the "start" field.
func StartLT(v time.Time) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldLT(FieldStart, v))
}

// StartLTE applies the LTE predicate on the "start" field.
func StartLTE(v time.Time) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldLTE(FieldStart, v))
}

// EndEQ applies the EQ predicate on the "end" field.
func EndEQ(v time.Time) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldEQ(FieldEnd, v))
}

// EndNEQ applies the NEQ predicate on the "end" field.
func EndNEQ(v time.Time) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldNEQ(FieldEnd, v))
}

// EndIn applies the In predicate on the "end" field.
func EndIn(vs ...time.Time) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldIn(FieldEnd, vs...))
}

// EndNotIn applies the NotIn predicate on the "end" field.
func EndNotIn(vs ...time.Time) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldNotIn(FieldEnd, vs...))
}

// EndGT applies the GT predicate on the "end" field.
func EndGT(v time.Time) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldGT(FieldEnd, v))
}

// EndGTE applies the GTE predicate on the "end" field.
func EndGTE(v time.Time) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldGTE(FieldEnd, v))
}

// EndLT applies the LT predicate on the "end" field.
func EndLT(v time.Time) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldLT(FieldEnd, v))
}

// EndLTE applies the LTE predicate on the "end" field.
func EndLTE(v time.Time) predicate.SalleDisponible {
	return predicate.SalleDisponible(sql.FieldLTE(FieldEnd, v))
}

// HasSalle applies the HasEdge predicate on the "salle" edge.
func HasSalle() predicate.SalleDisponible {
	return predicate.SalleDisponible(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SalleTable, SalleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSalleWith applies the HasEdge predicate on the "salle" edge with a given conditions (other predicates).
func HasSalleWith(preds ...predicate.Salle) predicate.SalleDisponible {
	return predicate.SalleDisponible(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SalleInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SalleTable, SalleColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SalleDisponible) predicate.SalleDisponible {
	return predicate.SalleDisponible(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SalleDisponible) predicate.SalleDisponible {
	return predicate.SalleDisponible(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SalleDisponible) predicate.SalleDisponible {
	return predicate.SalleDisponible(func(s *sql.Selector) {
		p(s.Not())
	})
}
