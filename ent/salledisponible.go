// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/abc3354/CODEV-back/ent/salle"
	"github.com/abc3354/CODEV-back/ent/salledisponible"
)

// SalleDisponible is the model entity for the SalleDisponible schema.
type SalleDisponible struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// IDSalle holds the value of the "id_salle" field.
	IDSalle string `json:"id_salle,omitempty"`
	// Start holds the value of the "start" field.
	Start time.Time `json:"start,omitempty"`
	// End holds the value of the "end" field.
	End time.Time `json:"end,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SalleDisponibleQuery when eager-loading is set.
	Edges               SalleDisponibleEdges `json:"edges"`
	salle_disponibilite *int
}

// SalleDisponibleEdges holds the relations/edges for other nodes in the graph.
type SalleDisponibleEdges struct {
	// Salle holds the value of the salle edge.
	Salle *Salle `json:"salle,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SalleOrErr returns the Salle value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SalleDisponibleEdges) SalleOrErr() (*Salle, error) {
	if e.loadedTypes[0] {
		if e.Salle == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: salle.Label}
		}
		return e.Salle, nil
	}
	return nil, &NotLoadedError{edge: "salle"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SalleDisponible) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case salledisponible.FieldID:
			values[i] = new(sql.NullInt64)
		case salledisponible.FieldIDSalle:
			values[i] = new(sql.NullString)
		case salledisponible.FieldStart, salledisponible.FieldEnd:
			values[i] = new(sql.NullTime)
		case salledisponible.ForeignKeys[0]: // salle_disponibilite
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SalleDisponible", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SalleDisponible fields.
func (sd *SalleDisponible) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case salledisponible.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sd.ID = int(value.Int64)
		case salledisponible.FieldIDSalle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id_salle", values[i])
			} else if value.Valid {
				sd.IDSalle = value.String
			}
		case salledisponible.FieldStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start", values[i])
			} else if value.Valid {
				sd.Start = value.Time
			}
		case salledisponible.FieldEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end", values[i])
			} else if value.Valid {
				sd.End = value.Time
			}
		case salledisponible.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field salle_disponibilite", value)
			} else if value.Valid {
				sd.salle_disponibilite = new(int)
				*sd.salle_disponibilite = int(value.Int64)
			}
		}
	}
	return nil
}

// QuerySalle queries the "salle" edge of the SalleDisponible entity.
func (sd *SalleDisponible) QuerySalle() *SalleQuery {
	return (&SalleDisponibleClient{config: sd.config}).QuerySalle(sd)
}

// Update returns a builder for updating this SalleDisponible.
// Note that you need to call SalleDisponible.Unwrap() before calling this method if this SalleDisponible
// was returned from a transaction, and the transaction was committed or rolled back.
func (sd *SalleDisponible) Update() *SalleDisponibleUpdateOne {
	return (&SalleDisponibleClient{config: sd.config}).UpdateOne(sd)
}

// Unwrap unwraps the SalleDisponible entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sd *SalleDisponible) Unwrap() *SalleDisponible {
	_tx, ok := sd.config.driver.(*txDriver)
	if !ok {
		panic("ent: SalleDisponible is not a transactional entity")
	}
	sd.config.driver = _tx.drv
	return sd
}

// String implements the fmt.Stringer.
func (sd *SalleDisponible) String() string {
	var builder strings.Builder
	builder.WriteString("SalleDisponible(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sd.ID))
	builder.WriteString("id_salle=")
	builder.WriteString(sd.IDSalle)
	builder.WriteString(", ")
	builder.WriteString("start=")
	builder.WriteString(sd.Start.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end=")
	builder.WriteString(sd.End.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SalleDisponibles is a parsable slice of SalleDisponible.
type SalleDisponibles []*SalleDisponible

func (sd SalleDisponibles) config(cfg config) {
	for _i := range sd {
		sd[_i].config = cfg
	}
}
