// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/abc3354/CODEV-back/ent/networking"
	"github.com/abc3354/CODEV-back/ent/predicate"
	"github.com/abc3354/CODEV-back/ent/profile"
	"github.com/google/uuid"
)

// NetworkingUpdate is the builder for updating Networking entities.
type NetworkingUpdate struct {
	config
	hooks    []Hook
	mutation *NetworkingMutation
}

// Where appends a list predicates to the NetworkingUpdate builder.
func (nu *NetworkingUpdate) Where(ps ...predicate.Networking) *NetworkingUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetProfileID sets the "profile_id" field.
func (nu *NetworkingUpdate) SetProfileID(u uuid.UUID) *NetworkingUpdate {
	nu.mutation.SetProfileID(u)
	return nu
}

// SetFriendID sets the "friend_id" field.
func (nu *NetworkingUpdate) SetFriendID(u uuid.UUID) *NetworkingUpdate {
	nu.mutation.SetFriendID(u)
	return nu
}

// SetCreatedAt sets the "created_at" field.
func (nu *NetworkingUpdate) SetCreatedAt(t time.Time) *NetworkingUpdate {
	nu.mutation.SetCreatedAt(t)
	return nu
}

// SetAccepted sets the "accepted" field.
func (nu *NetworkingUpdate) SetAccepted(b bool) *NetworkingUpdate {
	nu.mutation.SetAccepted(b)
	return nu
}

// SetProfile sets the "profile" edge to the Profile entity.
func (nu *NetworkingUpdate) SetProfile(p *Profile) *NetworkingUpdate {
	return nu.SetProfileID(p.ID)
}

// SetFriend sets the "friend" edge to the Profile entity.
func (nu *NetworkingUpdate) SetFriend(p *Profile) *NetworkingUpdate {
	return nu.SetFriendID(p.ID)
}

// Mutation returns the NetworkingMutation object of the builder.
func (nu *NetworkingUpdate) Mutation() *NetworkingMutation {
	return nu.mutation
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (nu *NetworkingUpdate) ClearProfile() *NetworkingUpdate {
	nu.mutation.ClearProfile()
	return nu
}

// ClearFriend clears the "friend" edge to the Profile entity.
func (nu *NetworkingUpdate) ClearFriend() *NetworkingUpdate {
	nu.mutation.ClearFriend()
	return nu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NetworkingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, NetworkingMutation](ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NetworkingUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NetworkingUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NetworkingUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nu *NetworkingUpdate) check() error {
	if _, ok := nu.mutation.ProfileID(); nu.mutation.ProfileCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Networking.profile"`)
	}
	if _, ok := nu.mutation.FriendID(); nu.mutation.FriendCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Networking.friend"`)
	}
	return nil
}

func (nu *NetworkingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   networking.Table,
			Columns: networking.Columns,
			CompositeID: []*sqlgraph.FieldSpec{
				{
					Type:   field.TypeUUID,
					Column: networking.FieldProfileID,
				},
				{
					Type:   field.TypeUUID,
					Column: networking.FieldFriendID,
				},
			},
		},
	}
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.CreatedAt(); ok {
		_spec.SetField(networking.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := nu.mutation.Accepted(); ok {
		_spec.SetField(networking.FieldAccepted, field.TypeBool, value)
	}
	if nu.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   networking.ProfileTable,
			Columns: []string{networking.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   networking.ProfileTable,
			Columns: []string{networking.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.FriendCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   networking.FriendTable,
			Columns: []string{networking.FriendColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.FriendIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   networking.FriendTable,
			Columns: []string{networking.FriendColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{networking.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NetworkingUpdateOne is the builder for updating a single Networking entity.
type NetworkingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NetworkingMutation
}

// SetProfileID sets the "profile_id" field.
func (nuo *NetworkingUpdateOne) SetProfileID(u uuid.UUID) *NetworkingUpdateOne {
	nuo.mutation.SetProfileID(u)
	return nuo
}

// SetFriendID sets the "friend_id" field.
func (nuo *NetworkingUpdateOne) SetFriendID(u uuid.UUID) *NetworkingUpdateOne {
	nuo.mutation.SetFriendID(u)
	return nuo
}

// SetCreatedAt sets the "created_at" field.
func (nuo *NetworkingUpdateOne) SetCreatedAt(t time.Time) *NetworkingUpdateOne {
	nuo.mutation.SetCreatedAt(t)
	return nuo
}

// SetAccepted sets the "accepted" field.
func (nuo *NetworkingUpdateOne) SetAccepted(b bool) *NetworkingUpdateOne {
	nuo.mutation.SetAccepted(b)
	return nuo
}

// SetProfile sets the "profile" edge to the Profile entity.
func (nuo *NetworkingUpdateOne) SetProfile(p *Profile) *NetworkingUpdateOne {
	return nuo.SetProfileID(p.ID)
}

// SetFriend sets the "friend" edge to the Profile entity.
func (nuo *NetworkingUpdateOne) SetFriend(p *Profile) *NetworkingUpdateOne {
	return nuo.SetFriendID(p.ID)
}

// Mutation returns the NetworkingMutation object of the builder.
func (nuo *NetworkingUpdateOne) Mutation() *NetworkingMutation {
	return nuo.mutation
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (nuo *NetworkingUpdateOne) ClearProfile() *NetworkingUpdateOne {
	nuo.mutation.ClearProfile()
	return nuo
}

// ClearFriend clears the "friend" edge to the Profile entity.
func (nuo *NetworkingUpdateOne) ClearFriend() *NetworkingUpdateOne {
	nuo.mutation.ClearFriend()
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NetworkingUpdateOne) Select(field string, fields ...string) *NetworkingUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Networking entity.
func (nuo *NetworkingUpdateOne) Save(ctx context.Context) (*Networking, error) {
	return withHooks[*Networking, NetworkingMutation](ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NetworkingUpdateOne) SaveX(ctx context.Context) *Networking {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NetworkingUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NetworkingUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuo *NetworkingUpdateOne) check() error {
	if _, ok := nuo.mutation.ProfileID(); nuo.mutation.ProfileCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Networking.profile"`)
	}
	if _, ok := nuo.mutation.FriendID(); nuo.mutation.FriendCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Networking.friend"`)
	}
	return nil
}

func (nuo *NetworkingUpdateOne) sqlSave(ctx context.Context) (_node *Networking, err error) {
	if err := nuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   networking.Table,
			Columns: networking.Columns,
			CompositeID: []*sqlgraph.FieldSpec{
				{
					Type:   field.TypeUUID,
					Column: networking.FieldProfileID,
				},
				{
					Type:   field.TypeUUID,
					Column: networking.FieldFriendID,
				},
			},
		},
	}
	if id, ok := nuo.mutation.ProfileID(); !ok {
		return nil, &ValidationError{Name: "profile_id", err: errors.New(`ent: missing "Networking.profile_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := nuo.mutation.FriendID(); !ok {
		return nil, &ValidationError{Name: "friend_id", err: errors.New(`ent: missing "Networking.friend_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !networking.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.CreatedAt(); ok {
		_spec.SetField(networking.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := nuo.mutation.Accepted(); ok {
		_spec.SetField(networking.FieldAccepted, field.TypeBool, value)
	}
	if nuo.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   networking.ProfileTable,
			Columns: []string{networking.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   networking.ProfileTable,
			Columns: []string{networking.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.FriendCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   networking.FriendTable,
			Columns: []string{networking.FriendColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.FriendIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   networking.FriendTable,
			Columns: []string{networking.FriendColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Networking{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{networking.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
