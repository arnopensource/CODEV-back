// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/abc3354/CODEV-back/ent/event"
	"github.com/abc3354/CODEV-back/ent/predicate"
	"github.com/abc3354/CODEV-back/ent/profile"
	"github.com/abc3354/CODEV-back/ent/room"
	"github.com/google/uuid"
)

// EventUpdate is the builder for updating Event entities.
type EventUpdate struct {
	config
	hooks    []Hook
	mutation *EventMutation
}

// Where appends a list predicates to the EventUpdate builder.
func (eu *EventUpdate) Where(ps ...predicate.Event) *EventUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetName sets the "name" field.
func (eu *EventUpdate) SetName(s string) *EventUpdate {
	eu.mutation.SetName(s)
	return eu
}

// SetActivity sets the "activity" field.
func (eu *EventUpdate) SetActivity(s string) *EventUpdate {
	eu.mutation.SetActivity(s)
	return eu
}

// SetStart sets the "start" field.
func (eu *EventUpdate) SetStart(t time.Time) *EventUpdate {
	eu.mutation.SetStart(t)
	return eu
}

// SetEnd sets the "end" field.
func (eu *EventUpdate) SetEnd(t time.Time) *EventUpdate {
	eu.mutation.SetEnd(t)
	return eu
}

// AddProfileIDs adds the "profiles" edge to the Profile entity by IDs.
func (eu *EventUpdate) AddProfileIDs(ids ...uuid.UUID) *EventUpdate {
	eu.mutation.AddProfileIDs(ids...)
	return eu
}

// AddProfiles adds the "profiles" edges to the Profile entity.
func (eu *EventUpdate) AddProfiles(p ...*Profile) *EventUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.AddProfileIDs(ids...)
}

// SetRoomID sets the "room" edge to the Room entity by ID.
func (eu *EventUpdate) SetRoomID(id int) *EventUpdate {
	eu.mutation.SetRoomID(id)
	return eu
}

// SetRoom sets the "room" edge to the Room entity.
func (eu *EventUpdate) SetRoom(r *Room) *EventUpdate {
	return eu.SetRoomID(r.ID)
}

// Mutation returns the EventMutation object of the builder.
func (eu *EventUpdate) Mutation() *EventMutation {
	return eu.mutation
}

// ClearProfiles clears all "profiles" edges to the Profile entity.
func (eu *EventUpdate) ClearProfiles() *EventUpdate {
	eu.mutation.ClearProfiles()
	return eu
}

// RemoveProfileIDs removes the "profiles" edge to Profile entities by IDs.
func (eu *EventUpdate) RemoveProfileIDs(ids ...uuid.UUID) *EventUpdate {
	eu.mutation.RemoveProfileIDs(ids...)
	return eu
}

// RemoveProfiles removes "profiles" edges to Profile entities.
func (eu *EventUpdate) RemoveProfiles(p ...*Profile) *EventUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.RemoveProfileIDs(ids...)
}

// ClearRoom clears the "room" edge to the Room entity.
func (eu *EventUpdate) ClearRoom() *EventUpdate {
	eu.mutation.ClearRoom()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EventUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, EventMutation](ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EventUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EventUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EventUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EventUpdate) check() error {
	if _, ok := eu.mutation.RoomID(); eu.mutation.RoomCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Event.room"`)
	}
	return nil
}

func (eu *EventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   event.Table,
			Columns: event.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: event.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.SetField(event.FieldName, field.TypeString, value)
	}
	if value, ok := eu.mutation.Activity(); ok {
		_spec.SetField(event.FieldActivity, field.TypeString, value)
	}
	if value, ok := eu.mutation.Start(); ok {
		_spec.SetField(event.FieldStart, field.TypeTime, value)
	}
	if value, ok := eu.mutation.End(); ok {
		_spec.SetField(event.FieldEnd, field.TypeTime, value)
	}
	if eu.mutation.ProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   event.ProfilesTable,
			Columns: event.ProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		createE := &MemberCreate{config: eu.config, mutation: newMemberMutation(eu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedProfilesIDs(); len(nodes) > 0 && !eu.mutation.ProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   event.ProfilesTable,
			Columns: event.ProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &MemberCreate{config: eu.config, mutation: newMemberMutation(eu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   event.ProfilesTable,
			Columns: event.ProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &MemberCreate{config: eu.config, mutation: newMemberMutation(eu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.RoomTable,
			Columns: []string{event.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.RoomTable,
			Columns: []string{event.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EventUpdateOne is the builder for updating a single Event entity.
type EventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventMutation
}

// SetName sets the "name" field.
func (euo *EventUpdateOne) SetName(s string) *EventUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// SetActivity sets the "activity" field.
func (euo *EventUpdateOne) SetActivity(s string) *EventUpdateOne {
	euo.mutation.SetActivity(s)
	return euo
}

// SetStart sets the "start" field.
func (euo *EventUpdateOne) SetStart(t time.Time) *EventUpdateOne {
	euo.mutation.SetStart(t)
	return euo
}

// SetEnd sets the "end" field.
func (euo *EventUpdateOne) SetEnd(t time.Time) *EventUpdateOne {
	euo.mutation.SetEnd(t)
	return euo
}

// AddProfileIDs adds the "profiles" edge to the Profile entity by IDs.
func (euo *EventUpdateOne) AddProfileIDs(ids ...uuid.UUID) *EventUpdateOne {
	euo.mutation.AddProfileIDs(ids...)
	return euo
}

// AddProfiles adds the "profiles" edges to the Profile entity.
func (euo *EventUpdateOne) AddProfiles(p ...*Profile) *EventUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.AddProfileIDs(ids...)
}

// SetRoomID sets the "room" edge to the Room entity by ID.
func (euo *EventUpdateOne) SetRoomID(id int) *EventUpdateOne {
	euo.mutation.SetRoomID(id)
	return euo
}

// SetRoom sets the "room" edge to the Room entity.
func (euo *EventUpdateOne) SetRoom(r *Room) *EventUpdateOne {
	return euo.SetRoomID(r.ID)
}

// Mutation returns the EventMutation object of the builder.
func (euo *EventUpdateOne) Mutation() *EventMutation {
	return euo.mutation
}

// ClearProfiles clears all "profiles" edges to the Profile entity.
func (euo *EventUpdateOne) ClearProfiles() *EventUpdateOne {
	euo.mutation.ClearProfiles()
	return euo
}

// RemoveProfileIDs removes the "profiles" edge to Profile entities by IDs.
func (euo *EventUpdateOne) RemoveProfileIDs(ids ...uuid.UUID) *EventUpdateOne {
	euo.mutation.RemoveProfileIDs(ids...)
	return euo
}

// RemoveProfiles removes "profiles" edges to Profile entities.
func (euo *EventUpdateOne) RemoveProfiles(p ...*Profile) *EventUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.RemoveProfileIDs(ids...)
}

// ClearRoom clears the "room" edge to the Room entity.
func (euo *EventUpdateOne) ClearRoom() *EventUpdateOne {
	euo.mutation.ClearRoom()
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EventUpdateOne) Select(field string, fields ...string) *EventUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Event entity.
func (euo *EventUpdateOne) Save(ctx context.Context) (*Event, error) {
	return withHooks[*Event, EventMutation](ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EventUpdateOne) SaveX(ctx context.Context) *Event {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EventUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EventUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EventUpdateOne) check() error {
	if _, ok := euo.mutation.RoomID(); euo.mutation.RoomCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Event.room"`)
	}
	return nil
}

func (euo *EventUpdateOne) sqlSave(ctx context.Context) (_node *Event, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   event.Table,
			Columns: event.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: event.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Event.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, event.FieldID)
		for _, f := range fields {
			if !event.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != event.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Name(); ok {
		_spec.SetField(event.FieldName, field.TypeString, value)
	}
	if value, ok := euo.mutation.Activity(); ok {
		_spec.SetField(event.FieldActivity, field.TypeString, value)
	}
	if value, ok := euo.mutation.Start(); ok {
		_spec.SetField(event.FieldStart, field.TypeTime, value)
	}
	if value, ok := euo.mutation.End(); ok {
		_spec.SetField(event.FieldEnd, field.TypeTime, value)
	}
	if euo.mutation.ProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   event.ProfilesTable,
			Columns: event.ProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		createE := &MemberCreate{config: euo.config, mutation: newMemberMutation(euo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedProfilesIDs(); len(nodes) > 0 && !euo.mutation.ProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   event.ProfilesTable,
			Columns: event.ProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &MemberCreate{config: euo.config, mutation: newMemberMutation(euo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   event.ProfilesTable,
			Columns: event.ProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &MemberCreate{config: euo.config, mutation: newMemberMutation(euo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.RoomTable,
			Columns: []string{event.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.RoomTable,
			Columns: []string{event.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Event{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
