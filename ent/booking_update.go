// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/abc3354/CODEV-back/ent/booking"
	"github.com/abc3354/CODEV-back/ent/predicate"
	"github.com/abc3354/CODEV-back/ent/profile"
	"github.com/abc3354/CODEV-back/ent/room"
	"github.com/google/uuid"
)

// BookingUpdate is the builder for updating Booking entities.
type BookingUpdate struct {
	config
	hooks    []Hook
	mutation *BookingMutation
}

// Where appends a list predicates to the BookingUpdate builder.
func (bu *BookingUpdate) Where(ps ...predicate.Booking) *BookingUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetProfileID sets the "profile_id" field.
func (bu *BookingUpdate) SetProfileID(u uuid.UUID) *BookingUpdate {
	bu.mutation.SetProfileID(u)
	return bu
}

// SetRoomID sets the "room_id" field.
func (bu *BookingUpdate) SetRoomID(i int) *BookingUpdate {
	bu.mutation.SetRoomID(i)
	return bu
}

// SetNumber sets the "number" field.
func (bu *BookingUpdate) SetNumber(i int) *BookingUpdate {
	bu.mutation.ResetNumber()
	bu.mutation.SetNumber(i)
	return bu
}

// AddNumber adds i to the "number" field.
func (bu *BookingUpdate) AddNumber(i int) *BookingUpdate {
	bu.mutation.AddNumber(i)
	return bu
}

// SetStart sets the "start" field.
func (bu *BookingUpdate) SetStart(t time.Time) *BookingUpdate {
	bu.mutation.SetStart(t)
	return bu
}

// SetEnd sets the "end" field.
func (bu *BookingUpdate) SetEnd(t time.Time) *BookingUpdate {
	bu.mutation.SetEnd(t)
	return bu
}

// SetProfile sets the "profile" edge to the Profile entity.
func (bu *BookingUpdate) SetProfile(p *Profile) *BookingUpdate {
	return bu.SetProfileID(p.ID)
}

// SetRoom sets the "room" edge to the Room entity.
func (bu *BookingUpdate) SetRoom(r *Room) *BookingUpdate {
	return bu.SetRoomID(r.ID)
}

// Mutation returns the BookingMutation object of the builder.
func (bu *BookingUpdate) Mutation() *BookingMutation {
	return bu.mutation
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (bu *BookingUpdate) ClearProfile() *BookingUpdate {
	bu.mutation.ClearProfile()
	return bu
}

// ClearRoom clears the "room" edge to the Room entity.
func (bu *BookingUpdate) ClearRoom() *BookingUpdate {
	bu.mutation.ClearRoom()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BookingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, BookingMutation](ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BookingUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BookingUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BookingUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BookingUpdate) check() error {
	if _, ok := bu.mutation.ProfileID(); bu.mutation.ProfileCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Booking.profile"`)
	}
	if _, ok := bu.mutation.RoomID(); bu.mutation.RoomCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Booking.room"`)
	}
	return nil
}

func (bu *BookingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   booking.Table,
			Columns: booking.Columns,
			CompositeID: []*sqlgraph.FieldSpec{
				{
					Type:   field.TypeUUID,
					Column: booking.FieldProfileID,
				},
				{
					Type:   field.TypeInt,
					Column: booking.FieldRoomID,
				},
			},
		},
	}
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Number(); ok {
		_spec.SetField(booking.FieldNumber, field.TypeInt, value)
	}
	if value, ok := bu.mutation.AddedNumber(); ok {
		_spec.AddField(booking.FieldNumber, field.TypeInt, value)
	}
	if value, ok := bu.mutation.Start(); ok {
		_spec.SetField(booking.FieldStart, field.TypeTime, value)
	}
	if value, ok := bu.mutation.End(); ok {
		_spec.SetField(booking.FieldEnd, field.TypeTime, value)
	}
	if bu.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   booking.ProfileTable,
			Columns: []string{booking.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   booking.ProfileTable,
			Columns: []string{booking.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   booking.RoomTable,
			Columns: []string{booking.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   booking.RoomTable,
			Columns: []string{booking.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{booking.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BookingUpdateOne is the builder for updating a single Booking entity.
type BookingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BookingMutation
}

// SetProfileID sets the "profile_id" field.
func (buo *BookingUpdateOne) SetProfileID(u uuid.UUID) *BookingUpdateOne {
	buo.mutation.SetProfileID(u)
	return buo
}

// SetRoomID sets the "room_id" field.
func (buo *BookingUpdateOne) SetRoomID(i int) *BookingUpdateOne {
	buo.mutation.SetRoomID(i)
	return buo
}

// SetNumber sets the "number" field.
func (buo *BookingUpdateOne) SetNumber(i int) *BookingUpdateOne {
	buo.mutation.ResetNumber()
	buo.mutation.SetNumber(i)
	return buo
}

// AddNumber adds i to the "number" field.
func (buo *BookingUpdateOne) AddNumber(i int) *BookingUpdateOne {
	buo.mutation.AddNumber(i)
	return buo
}

// SetStart sets the "start" field.
func (buo *BookingUpdateOne) SetStart(t time.Time) *BookingUpdateOne {
	buo.mutation.SetStart(t)
	return buo
}

// SetEnd sets the "end" field.
func (buo *BookingUpdateOne) SetEnd(t time.Time) *BookingUpdateOne {
	buo.mutation.SetEnd(t)
	return buo
}

// SetProfile sets the "profile" edge to the Profile entity.
func (buo *BookingUpdateOne) SetProfile(p *Profile) *BookingUpdateOne {
	return buo.SetProfileID(p.ID)
}

// SetRoom sets the "room" edge to the Room entity.
func (buo *BookingUpdateOne) SetRoom(r *Room) *BookingUpdateOne {
	return buo.SetRoomID(r.ID)
}

// Mutation returns the BookingMutation object of the builder.
func (buo *BookingUpdateOne) Mutation() *BookingMutation {
	return buo.mutation
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (buo *BookingUpdateOne) ClearProfile() *BookingUpdateOne {
	buo.mutation.ClearProfile()
	return buo
}

// ClearRoom clears the "room" edge to the Room entity.
func (buo *BookingUpdateOne) ClearRoom() *BookingUpdateOne {
	buo.mutation.ClearRoom()
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BookingUpdateOne) Select(field string, fields ...string) *BookingUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Booking entity.
func (buo *BookingUpdateOne) Save(ctx context.Context) (*Booking, error) {
	return withHooks[*Booking, BookingMutation](ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BookingUpdateOne) SaveX(ctx context.Context) *Booking {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BookingUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BookingUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BookingUpdateOne) check() error {
	if _, ok := buo.mutation.ProfileID(); buo.mutation.ProfileCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Booking.profile"`)
	}
	if _, ok := buo.mutation.RoomID(); buo.mutation.RoomCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Booking.room"`)
	}
	return nil
}

func (buo *BookingUpdateOne) sqlSave(ctx context.Context) (_node *Booking, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   booking.Table,
			Columns: booking.Columns,
			CompositeID: []*sqlgraph.FieldSpec{
				{
					Type:   field.TypeUUID,
					Column: booking.FieldProfileID,
				},
				{
					Type:   field.TypeInt,
					Column: booking.FieldRoomID,
				},
			},
		},
	}
	if id, ok := buo.mutation.ProfileID(); !ok {
		return nil, &ValidationError{Name: "profile_id", err: errors.New(`ent: missing "Booking.profile_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := buo.mutation.RoomID(); !ok {
		return nil, &ValidationError{Name: "room_id", err: errors.New(`ent: missing "Booking.room_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !booking.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Number(); ok {
		_spec.SetField(booking.FieldNumber, field.TypeInt, value)
	}
	if value, ok := buo.mutation.AddedNumber(); ok {
		_spec.AddField(booking.FieldNumber, field.TypeInt, value)
	}
	if value, ok := buo.mutation.Start(); ok {
		_spec.SetField(booking.FieldStart, field.TypeTime, value)
	}
	if value, ok := buo.mutation.End(); ok {
		_spec.SetField(booking.FieldEnd, field.TypeTime, value)
	}
	if buo.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   booking.ProfileTable,
			Columns: []string{booking.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   booking.ProfileTable,
			Columns: []string{booking.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   booking.RoomTable,
			Columns: []string{booking.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   booking.RoomTable,
			Columns: []string{booking.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Booking{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{booking.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
