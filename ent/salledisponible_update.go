// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/abc3354/CODEV-back/ent/predicate"
	"github.com/abc3354/CODEV-back/ent/salle"
	"github.com/abc3354/CODEV-back/ent/salledisponible"
)

// SalleDisponibleUpdate is the builder for updating SalleDisponible entities.
type SalleDisponibleUpdate struct {
	config
	hooks    []Hook
	mutation *SalleDisponibleMutation
}

// Where appends a list predicates to the SalleDisponibleUpdate builder.
func (sdu *SalleDisponibleUpdate) Where(ps ...predicate.SalleDisponible) *SalleDisponibleUpdate {
	sdu.mutation.Where(ps...)
	return sdu
}

// SetIDSalle sets the "id_salle" field.
func (sdu *SalleDisponibleUpdate) SetIDSalle(s string) *SalleDisponibleUpdate {
	sdu.mutation.SetIDSalle(s)
	return sdu
}

// SetStart sets the "start" field.
func (sdu *SalleDisponibleUpdate) SetStart(t time.Time) *SalleDisponibleUpdate {
	sdu.mutation.SetStart(t)
	return sdu
}

// SetEnd sets the "end" field.
func (sdu *SalleDisponibleUpdate) SetEnd(t time.Time) *SalleDisponibleUpdate {
	sdu.mutation.SetEnd(t)
	return sdu
}

// SetSalleID sets the "salle" edge to the Salle entity by ID.
func (sdu *SalleDisponibleUpdate) SetSalleID(id int) *SalleDisponibleUpdate {
	sdu.mutation.SetSalleID(id)
	return sdu
}

// SetNillableSalleID sets the "salle" edge to the Salle entity by ID if the given value is not nil.
func (sdu *SalleDisponibleUpdate) SetNillableSalleID(id *int) *SalleDisponibleUpdate {
	if id != nil {
		sdu = sdu.SetSalleID(*id)
	}
	return sdu
}

// SetSalle sets the "salle" edge to the Salle entity.
func (sdu *SalleDisponibleUpdate) SetSalle(s *Salle) *SalleDisponibleUpdate {
	return sdu.SetSalleID(s.ID)
}

// Mutation returns the SalleDisponibleMutation object of the builder.
func (sdu *SalleDisponibleUpdate) Mutation() *SalleDisponibleMutation {
	return sdu.mutation
}

// ClearSalle clears the "salle" edge to the Salle entity.
func (sdu *SalleDisponibleUpdate) ClearSalle() *SalleDisponibleUpdate {
	sdu.mutation.ClearSalle()
	return sdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sdu *SalleDisponibleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, SalleDisponibleMutation](ctx, sdu.sqlSave, sdu.mutation, sdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sdu *SalleDisponibleUpdate) SaveX(ctx context.Context) int {
	affected, err := sdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sdu *SalleDisponibleUpdate) Exec(ctx context.Context) error {
	_, err := sdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdu *SalleDisponibleUpdate) ExecX(ctx context.Context) {
	if err := sdu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sdu *SalleDisponibleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   salledisponible.Table,
			Columns: salledisponible.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: salledisponible.FieldID,
			},
		},
	}
	if ps := sdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sdu.mutation.IDSalle(); ok {
		_spec.SetField(salledisponible.FieldIDSalle, field.TypeString, value)
	}
	if value, ok := sdu.mutation.Start(); ok {
		_spec.SetField(salledisponible.FieldStart, field.TypeTime, value)
	}
	if value, ok := sdu.mutation.End(); ok {
		_spec.SetField(salledisponible.FieldEnd, field.TypeTime, value)
	}
	if sdu.mutation.SalleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   salledisponible.SalleTable,
			Columns: []string{salledisponible.SalleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: salle.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sdu.mutation.SalleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   salledisponible.SalleTable,
			Columns: []string{salledisponible.SalleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: salle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{salledisponible.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sdu.mutation.done = true
	return n, nil
}

// SalleDisponibleUpdateOne is the builder for updating a single SalleDisponible entity.
type SalleDisponibleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SalleDisponibleMutation
}

// SetIDSalle sets the "id_salle" field.
func (sduo *SalleDisponibleUpdateOne) SetIDSalle(s string) *SalleDisponibleUpdateOne {
	sduo.mutation.SetIDSalle(s)
	return sduo
}

// SetStart sets the "start" field.
func (sduo *SalleDisponibleUpdateOne) SetStart(t time.Time) *SalleDisponibleUpdateOne {
	sduo.mutation.SetStart(t)
	return sduo
}

// SetEnd sets the "end" field.
func (sduo *SalleDisponibleUpdateOne) SetEnd(t time.Time) *SalleDisponibleUpdateOne {
	sduo.mutation.SetEnd(t)
	return sduo
}

// SetSalleID sets the "salle" edge to the Salle entity by ID.
func (sduo *SalleDisponibleUpdateOne) SetSalleID(id int) *SalleDisponibleUpdateOne {
	sduo.mutation.SetSalleID(id)
	return sduo
}

// SetNillableSalleID sets the "salle" edge to the Salle entity by ID if the given value is not nil.
func (sduo *SalleDisponibleUpdateOne) SetNillableSalleID(id *int) *SalleDisponibleUpdateOne {
	if id != nil {
		sduo = sduo.SetSalleID(*id)
	}
	return sduo
}

// SetSalle sets the "salle" edge to the Salle entity.
func (sduo *SalleDisponibleUpdateOne) SetSalle(s *Salle) *SalleDisponibleUpdateOne {
	return sduo.SetSalleID(s.ID)
}

// Mutation returns the SalleDisponibleMutation object of the builder.
func (sduo *SalleDisponibleUpdateOne) Mutation() *SalleDisponibleMutation {
	return sduo.mutation
}

// ClearSalle clears the "salle" edge to the Salle entity.
func (sduo *SalleDisponibleUpdateOne) ClearSalle() *SalleDisponibleUpdateOne {
	sduo.mutation.ClearSalle()
	return sduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sduo *SalleDisponibleUpdateOne) Select(field string, fields ...string) *SalleDisponibleUpdateOne {
	sduo.fields = append([]string{field}, fields...)
	return sduo
}

// Save executes the query and returns the updated SalleDisponible entity.
func (sduo *SalleDisponibleUpdateOne) Save(ctx context.Context) (*SalleDisponible, error) {
	return withHooks[*SalleDisponible, SalleDisponibleMutation](ctx, sduo.sqlSave, sduo.mutation, sduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sduo *SalleDisponibleUpdateOne) SaveX(ctx context.Context) *SalleDisponible {
	node, err := sduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sduo *SalleDisponibleUpdateOne) Exec(ctx context.Context) error {
	_, err := sduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sduo *SalleDisponibleUpdateOne) ExecX(ctx context.Context) {
	if err := sduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sduo *SalleDisponibleUpdateOne) sqlSave(ctx context.Context) (_node *SalleDisponible, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   salledisponible.Table,
			Columns: salledisponible.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: salledisponible.FieldID,
			},
		},
	}
	id, ok := sduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SalleDisponible.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, salledisponible.FieldID)
		for _, f := range fields {
			if !salledisponible.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != salledisponible.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sduo.mutation.IDSalle(); ok {
		_spec.SetField(salledisponible.FieldIDSalle, field.TypeString, value)
	}
	if value, ok := sduo.mutation.Start(); ok {
		_spec.SetField(salledisponible.FieldStart, field.TypeTime, value)
	}
	if value, ok := sduo.mutation.End(); ok {
		_spec.SetField(salledisponible.FieldEnd, field.TypeTime, value)
	}
	if sduo.mutation.SalleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   salledisponible.SalleTable,
			Columns: []string{salledisponible.SalleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: salle.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sduo.mutation.SalleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   salledisponible.SalleTable,
			Columns: []string{salledisponible.SalleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: salle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SalleDisponible{config: sduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{salledisponible.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sduo.mutation.done = true
	return _node, nil
}
