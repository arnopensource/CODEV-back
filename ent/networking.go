// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/abc3354/CODEV-back/ent/networking"
	"github.com/abc3354/CODEV-back/ent/profile"
	"github.com/google/uuid"
)

// Networking is the model entity for the Networking schema.
type Networking struct {
	config `json:"-"`
	// ProfileID holds the value of the "profile_id" field.
	ProfileID uuid.UUID `json:"profile_id,omitempty"`
	// FriendID holds the value of the "friend_id" field.
	FriendID uuid.UUID `json:"friend_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Accepted holds the value of the "accepted" field.
	Accepted bool `json:"accepted,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NetworkingQuery when eager-loading is set.
	Edges NetworkingEdges `json:"edges"`
}

// NetworkingEdges holds the relations/edges for other nodes in the graph.
type NetworkingEdges struct {
	// Profile holds the value of the profile edge.
	Profile *Profile `json:"profile,omitempty"`
	// Friend holds the value of the friend edge.
	Friend *Profile `json:"friend,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProfileOrErr returns the Profile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NetworkingEdges) ProfileOrErr() (*Profile, error) {
	if e.loadedTypes[0] {
		if e.Profile == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: profile.Label}
		}
		return e.Profile, nil
	}
	return nil, &NotLoadedError{edge: "profile"}
}

// FriendOrErr returns the Friend value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NetworkingEdges) FriendOrErr() (*Profile, error) {
	if e.loadedTypes[1] {
		if e.Friend == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: profile.Label}
		}
		return e.Friend, nil
	}
	return nil, &NotLoadedError{edge: "friend"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Networking) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case networking.FieldAccepted:
			values[i] = new(sql.NullBool)
		case networking.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case networking.FieldProfileID, networking.FieldFriendID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Networking", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Networking fields.
func (n *Networking) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case networking.FieldProfileID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field profile_id", values[i])
			} else if value != nil {
				n.ProfileID = *value
			}
		case networking.FieldFriendID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field friend_id", values[i])
			} else if value != nil {
				n.FriendID = *value
			}
		case networking.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				n.CreatedAt = value.Time
			}
		case networking.FieldAccepted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field accepted", values[i])
			} else if value.Valid {
				n.Accepted = value.Bool
			}
		}
	}
	return nil
}

// QueryProfile queries the "profile" edge of the Networking entity.
func (n *Networking) QueryProfile() *ProfileQuery {
	return (&NetworkingClient{config: n.config}).QueryProfile(n)
}

// QueryFriend queries the "friend" edge of the Networking entity.
func (n *Networking) QueryFriend() *ProfileQuery {
	return (&NetworkingClient{config: n.config}).QueryFriend(n)
}

// Update returns a builder for updating this Networking.
// Note that you need to call Networking.Unwrap() before calling this method if this Networking
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Networking) Update() *NetworkingUpdateOne {
	return (&NetworkingClient{config: n.config}).UpdateOne(n)
}

// Unwrap unwraps the Networking entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Networking) Unwrap() *Networking {
	_tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: Networking is not a transactional entity")
	}
	n.config.driver = _tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Networking) String() string {
	var builder strings.Builder
	builder.WriteString("Networking(")
	builder.WriteString("profile_id=")
	builder.WriteString(fmt.Sprintf("%v", n.ProfileID))
	builder.WriteString(", ")
	builder.WriteString("friend_id=")
	builder.WriteString(fmt.Sprintf("%v", n.FriendID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(n.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("accepted=")
	builder.WriteString(fmt.Sprintf("%v", n.Accepted))
	builder.WriteByte(')')
	return builder.String()
}

// Networkings is a parsable slice of Networking.
type Networkings []*Networking

func (n Networkings) config(cfg config) {
	for _i := range n {
		n[_i].config = cfg
	}
}
