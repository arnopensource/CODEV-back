// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/abc3354/CODEV-back/ent/event"
	"github.com/abc3354/CODEV-back/ent/eventinvite"
	"github.com/abc3354/CODEV-back/ent/profile"
	"github.com/google/uuid"
)

// EventInvite is the model entity for the EventInvite schema.
type EventInvite struct {
	config `json:"-"`
	// ProfileID holds the value of the "profile_id" field.
	ProfileID uuid.UUID `json:"profileId"`
	// EventID holds the value of the "event_id" field.
	EventID int `json:"eventId"`
	// Since holds the value of the "since" field.
	Since time.Time `json:"since,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventInviteQuery when eager-loading is set.
	Edges EventInviteEdges `json:"edges"`
}

// EventInviteEdges holds the relations/edges for other nodes in the graph.
type EventInviteEdges struct {
	// Profile holds the value of the profile edge.
	Profile *Profile `json:"profile,omitempty"`
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProfileOrErr returns the Profile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventInviteEdges) ProfileOrErr() (*Profile, error) {
	if e.loadedTypes[0] {
		if e.Profile == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: profile.Label}
		}
		return e.Profile, nil
	}
	return nil, &NotLoadedError{edge: "profile"}
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventInviteEdges) EventOrErr() (*Event, error) {
	if e.loadedTypes[1] {
		if e.Event == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: event.Label}
		}
		return e.Event, nil
	}
	return nil, &NotLoadedError{edge: "event"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EventInvite) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case eventinvite.FieldEventID:
			values[i] = new(sql.NullInt64)
		case eventinvite.FieldSince:
			values[i] = new(sql.NullTime)
		case eventinvite.FieldProfileID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type EventInvite", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EventInvite fields.
func (ei *EventInvite) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case eventinvite.FieldProfileID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field profile_id", values[i])
			} else if value != nil {
				ei.ProfileID = *value
			}
		case eventinvite.FieldEventID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field event_id", values[i])
			} else if value.Valid {
				ei.EventID = int(value.Int64)
			}
		case eventinvite.FieldSince:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field since", values[i])
			} else if value.Valid {
				ei.Since = value.Time
			}
		}
	}
	return nil
}

// QueryProfile queries the "profile" edge of the EventInvite entity.
func (ei *EventInvite) QueryProfile() *ProfileQuery {
	return (&EventInviteClient{config: ei.config}).QueryProfile(ei)
}

// QueryEvent queries the "event" edge of the EventInvite entity.
func (ei *EventInvite) QueryEvent() *EventQuery {
	return (&EventInviteClient{config: ei.config}).QueryEvent(ei)
}

// Update returns a builder for updating this EventInvite.
// Note that you need to call EventInvite.Unwrap() before calling this method if this EventInvite
// was returned from a transaction, and the transaction was committed or rolled back.
func (ei *EventInvite) Update() *EventInviteUpdateOne {
	return (&EventInviteClient{config: ei.config}).UpdateOne(ei)
}

// Unwrap unwraps the EventInvite entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ei *EventInvite) Unwrap() *EventInvite {
	_tx, ok := ei.config.driver.(*txDriver)
	if !ok {
		panic("ent: EventInvite is not a transactional entity")
	}
	ei.config.driver = _tx.drv
	return ei
}

// String implements the fmt.Stringer.
func (ei *EventInvite) String() string {
	var builder strings.Builder
	builder.WriteString("EventInvite(")
	builder.WriteString("profile_id=")
	builder.WriteString(fmt.Sprintf("%v", ei.ProfileID))
	builder.WriteString(", ")
	builder.WriteString("event_id=")
	builder.WriteString(fmt.Sprintf("%v", ei.EventID))
	builder.WriteString(", ")
	builder.WriteString("since=")
	builder.WriteString(ei.Since.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// EventInvites is a parsable slice of EventInvite.
type EventInvites []*EventInvite

func (ei EventInvites) config(cfg config) {
	for _i := range ei {
		ei[_i].config = cfg
	}
}
