// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/abc3354/CODEV-back/ent/predicate"
	"github.com/abc3354/CODEV-back/ent/profile"
	"github.com/abc3354/CODEV-back/ent/salle"
	"github.com/abc3354/CODEV-back/ent/salledisponible"
	"github.com/google/uuid"
)

// SalleUpdate is the builder for updating Salle entities.
type SalleUpdate struct {
	config
	hooks    []Hook
	mutation *SalleMutation
}

// Where appends a list predicates to the SalleUpdate builder.
func (su *SalleUpdate) Where(ps ...predicate.Salle) *SalleUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetNom sets the "nom" field.
func (su *SalleUpdate) SetNom(s string) *SalleUpdate {
	su.mutation.SetNom(s)
	return su
}

// SetBatiment sets the "batiment" field.
func (su *SalleUpdate) SetBatiment(s string) *SalleUpdate {
	su.mutation.SetBatiment(s)
	return su
}

// SetEtage sets the "etage" field.
func (su *SalleUpdate) SetEtage(s string) *SalleUpdate {
	su.mutation.SetEtage(s)
	return su
}

// SetNumSalle sets the "num_salle" field.
func (su *SalleUpdate) SetNumSalle(s string) *SalleUpdate {
	su.mutation.SetNumSalle(s)
	return su
}

// SetCapMax sets the "cap_max" field.
func (su *SalleUpdate) SetCapMax(i int) *SalleUpdate {
	su.mutation.ResetCapMax()
	su.mutation.SetCapMax(i)
	return su
}

// AddCapMax adds i to the "cap_max" field.
func (su *SalleUpdate) AddCapMax(i int) *SalleUpdate {
	su.mutation.AddCapMax(i)
	return su
}

// AddProfilReservationIDs adds the "profil_reservation" edge to the Profile entity by IDs.
func (su *SalleUpdate) AddProfilReservationIDs(ids ...uuid.UUID) *SalleUpdate {
	su.mutation.AddProfilReservationIDs(ids...)
	return su
}

// AddProfilReservation adds the "profil_reservation" edges to the Profile entity.
func (su *SalleUpdate) AddProfilReservation(p ...*Profile) *SalleUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddProfilReservationIDs(ids...)
}

// AddDisponibiliteIDs adds the "disponibilite" edge to the SalleDisponible entity by IDs.
func (su *SalleUpdate) AddDisponibiliteIDs(ids ...int) *SalleUpdate {
	su.mutation.AddDisponibiliteIDs(ids...)
	return su
}

// AddDisponibilite adds the "disponibilite" edges to the SalleDisponible entity.
func (su *SalleUpdate) AddDisponibilite(s ...*SalleDisponible) *SalleUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddDisponibiliteIDs(ids...)
}

// Mutation returns the SalleMutation object of the builder.
func (su *SalleUpdate) Mutation() *SalleMutation {
	return su.mutation
}

// ClearProfilReservation clears all "profil_reservation" edges to the Profile entity.
func (su *SalleUpdate) ClearProfilReservation() *SalleUpdate {
	su.mutation.ClearProfilReservation()
	return su
}

// RemoveProfilReservationIDs removes the "profil_reservation" edge to Profile entities by IDs.
func (su *SalleUpdate) RemoveProfilReservationIDs(ids ...uuid.UUID) *SalleUpdate {
	su.mutation.RemoveProfilReservationIDs(ids...)
	return su
}

// RemoveProfilReservation removes "profil_reservation" edges to Profile entities.
func (su *SalleUpdate) RemoveProfilReservation(p ...*Profile) *SalleUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemoveProfilReservationIDs(ids...)
}

// ClearDisponibilite clears all "disponibilite" edges to the SalleDisponible entity.
func (su *SalleUpdate) ClearDisponibilite() *SalleUpdate {
	su.mutation.ClearDisponibilite()
	return su
}

// RemoveDisponibiliteIDs removes the "disponibilite" edge to SalleDisponible entities by IDs.
func (su *SalleUpdate) RemoveDisponibiliteIDs(ids ...int) *SalleUpdate {
	su.mutation.RemoveDisponibiliteIDs(ids...)
	return su
}

// RemoveDisponibilite removes "disponibilite" edges to SalleDisponible entities.
func (su *SalleUpdate) RemoveDisponibilite(s ...*SalleDisponible) *SalleUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveDisponibiliteIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SalleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, SalleMutation](ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SalleUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SalleUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SalleUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SalleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   salle.Table,
			Columns: salle.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: salle.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Nom(); ok {
		_spec.SetField(salle.FieldNom, field.TypeString, value)
	}
	if value, ok := su.mutation.Batiment(); ok {
		_spec.SetField(salle.FieldBatiment, field.TypeString, value)
	}
	if value, ok := su.mutation.Etage(); ok {
		_spec.SetField(salle.FieldEtage, field.TypeString, value)
	}
	if value, ok := su.mutation.NumSalle(); ok {
		_spec.SetField(salle.FieldNumSalle, field.TypeString, value)
	}
	if value, ok := su.mutation.CapMax(); ok {
		_spec.SetField(salle.FieldCapMax, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedCapMax(); ok {
		_spec.AddField(salle.FieldCapMax, field.TypeInt, value)
	}
	if su.mutation.ProfilReservationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   salle.ProfilReservationTable,
			Columns: salle.ProfilReservationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedProfilReservationIDs(); len(nodes) > 0 && !su.mutation.ProfilReservationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   salle.ProfilReservationTable,
			Columns: salle.ProfilReservationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ProfilReservationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   salle.ProfilReservationTable,
			Columns: salle.ProfilReservationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.DisponibiliteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   salle.DisponibiliteTable,
			Columns: []string{salle.DisponibiliteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: salledisponible.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedDisponibiliteIDs(); len(nodes) > 0 && !su.mutation.DisponibiliteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   salle.DisponibiliteTable,
			Columns: []string{salle.DisponibiliteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: salledisponible.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.DisponibiliteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   salle.DisponibiliteTable,
			Columns: []string{salle.DisponibiliteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: salledisponible.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{salle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SalleUpdateOne is the builder for updating a single Salle entity.
type SalleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SalleMutation
}

// SetNom sets the "nom" field.
func (suo *SalleUpdateOne) SetNom(s string) *SalleUpdateOne {
	suo.mutation.SetNom(s)
	return suo
}

// SetBatiment sets the "batiment" field.
func (suo *SalleUpdateOne) SetBatiment(s string) *SalleUpdateOne {
	suo.mutation.SetBatiment(s)
	return suo
}

// SetEtage sets the "etage" field.
func (suo *SalleUpdateOne) SetEtage(s string) *SalleUpdateOne {
	suo.mutation.SetEtage(s)
	return suo
}

// SetNumSalle sets the "num_salle" field.
func (suo *SalleUpdateOne) SetNumSalle(s string) *SalleUpdateOne {
	suo.mutation.SetNumSalle(s)
	return suo
}

// SetCapMax sets the "cap_max" field.
func (suo *SalleUpdateOne) SetCapMax(i int) *SalleUpdateOne {
	suo.mutation.ResetCapMax()
	suo.mutation.SetCapMax(i)
	return suo
}

// AddCapMax adds i to the "cap_max" field.
func (suo *SalleUpdateOne) AddCapMax(i int) *SalleUpdateOne {
	suo.mutation.AddCapMax(i)
	return suo
}

// AddProfilReservationIDs adds the "profil_reservation" edge to the Profile entity by IDs.
func (suo *SalleUpdateOne) AddProfilReservationIDs(ids ...uuid.UUID) *SalleUpdateOne {
	suo.mutation.AddProfilReservationIDs(ids...)
	return suo
}

// AddProfilReservation adds the "profil_reservation" edges to the Profile entity.
func (suo *SalleUpdateOne) AddProfilReservation(p ...*Profile) *SalleUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddProfilReservationIDs(ids...)
}

// AddDisponibiliteIDs adds the "disponibilite" edge to the SalleDisponible entity by IDs.
func (suo *SalleUpdateOne) AddDisponibiliteIDs(ids ...int) *SalleUpdateOne {
	suo.mutation.AddDisponibiliteIDs(ids...)
	return suo
}

// AddDisponibilite adds the "disponibilite" edges to the SalleDisponible entity.
func (suo *SalleUpdateOne) AddDisponibilite(s ...*SalleDisponible) *SalleUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddDisponibiliteIDs(ids...)
}

// Mutation returns the SalleMutation object of the builder.
func (suo *SalleUpdateOne) Mutation() *SalleMutation {
	return suo.mutation
}

// ClearProfilReservation clears all "profil_reservation" edges to the Profile entity.
func (suo *SalleUpdateOne) ClearProfilReservation() *SalleUpdateOne {
	suo.mutation.ClearProfilReservation()
	return suo
}

// RemoveProfilReservationIDs removes the "profil_reservation" edge to Profile entities by IDs.
func (suo *SalleUpdateOne) RemoveProfilReservationIDs(ids ...uuid.UUID) *SalleUpdateOne {
	suo.mutation.RemoveProfilReservationIDs(ids...)
	return suo
}

// RemoveProfilReservation removes "profil_reservation" edges to Profile entities.
func (suo *SalleUpdateOne) RemoveProfilReservation(p ...*Profile) *SalleUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemoveProfilReservationIDs(ids...)
}

// ClearDisponibilite clears all "disponibilite" edges to the SalleDisponible entity.
func (suo *SalleUpdateOne) ClearDisponibilite() *SalleUpdateOne {
	suo.mutation.ClearDisponibilite()
	return suo
}

// RemoveDisponibiliteIDs removes the "disponibilite" edge to SalleDisponible entities by IDs.
func (suo *SalleUpdateOne) RemoveDisponibiliteIDs(ids ...int) *SalleUpdateOne {
	suo.mutation.RemoveDisponibiliteIDs(ids...)
	return suo
}

// RemoveDisponibilite removes "disponibilite" edges to SalleDisponible entities.
func (suo *SalleUpdateOne) RemoveDisponibilite(s ...*SalleDisponible) *SalleUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveDisponibiliteIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SalleUpdateOne) Select(field string, fields ...string) *SalleUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Salle entity.
func (suo *SalleUpdateOne) Save(ctx context.Context) (*Salle, error) {
	return withHooks[*Salle, SalleMutation](ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SalleUpdateOne) SaveX(ctx context.Context) *Salle {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SalleUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SalleUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SalleUpdateOne) sqlSave(ctx context.Context) (_node *Salle, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   salle.Table,
			Columns: salle.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: salle.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Salle.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, salle.FieldID)
		for _, f := range fields {
			if !salle.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != salle.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Nom(); ok {
		_spec.SetField(salle.FieldNom, field.TypeString, value)
	}
	if value, ok := suo.mutation.Batiment(); ok {
		_spec.SetField(salle.FieldBatiment, field.TypeString, value)
	}
	if value, ok := suo.mutation.Etage(); ok {
		_spec.SetField(salle.FieldEtage, field.TypeString, value)
	}
	if value, ok := suo.mutation.NumSalle(); ok {
		_spec.SetField(salle.FieldNumSalle, field.TypeString, value)
	}
	if value, ok := suo.mutation.CapMax(); ok {
		_spec.SetField(salle.FieldCapMax, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedCapMax(); ok {
		_spec.AddField(salle.FieldCapMax, field.TypeInt, value)
	}
	if suo.mutation.ProfilReservationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   salle.ProfilReservationTable,
			Columns: salle.ProfilReservationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedProfilReservationIDs(); len(nodes) > 0 && !suo.mutation.ProfilReservationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   salle.ProfilReservationTable,
			Columns: salle.ProfilReservationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ProfilReservationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   salle.ProfilReservationTable,
			Columns: salle.ProfilReservationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.DisponibiliteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   salle.DisponibiliteTable,
			Columns: []string{salle.DisponibiliteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: salledisponible.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedDisponibiliteIDs(); len(nodes) > 0 && !suo.mutation.DisponibiliteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   salle.DisponibiliteTable,
			Columns: []string{salle.DisponibiliteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: salledisponible.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.DisponibiliteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   salle.DisponibiliteTable,
			Columns: []string{salle.DisponibiliteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: salledisponible.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Salle{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{salle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
