// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/abc3354/CODEV-back/ent/profile"
	"github.com/abc3354/CODEV-back/ent/salle"
	"github.com/abc3354/CODEV-back/ent/salledisponible"
	"github.com/google/uuid"
)

// SalleCreate is the builder for creating a Salle entity.
type SalleCreate struct {
	config
	mutation *SalleMutation
	hooks    []Hook
}

// SetNom sets the "nom" field.
func (sc *SalleCreate) SetNom(s string) *SalleCreate {
	sc.mutation.SetNom(s)
	return sc
}

// SetBatiment sets the "batiment" field.
func (sc *SalleCreate) SetBatiment(s string) *SalleCreate {
	sc.mutation.SetBatiment(s)
	return sc
}

// SetEtage sets the "etage" field.
func (sc *SalleCreate) SetEtage(s string) *SalleCreate {
	sc.mutation.SetEtage(s)
	return sc
}

// SetNumSalle sets the "num_salle" field.
func (sc *SalleCreate) SetNumSalle(s string) *SalleCreate {
	sc.mutation.SetNumSalle(s)
	return sc
}

// SetCapMax sets the "cap_max" field.
func (sc *SalleCreate) SetCapMax(i int) *SalleCreate {
	sc.mutation.SetCapMax(i)
	return sc
}

// AddProfilReservationIDs adds the "profil_reservation" edge to the Profile entity by IDs.
func (sc *SalleCreate) AddProfilReservationIDs(ids ...uuid.UUID) *SalleCreate {
	sc.mutation.AddProfilReservationIDs(ids...)
	return sc
}

// AddProfilReservation adds the "profil_reservation" edges to the Profile entity.
func (sc *SalleCreate) AddProfilReservation(p ...*Profile) *SalleCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sc.AddProfilReservationIDs(ids...)
}

// AddDisponibiliteIDs adds the "disponibilite" edge to the SalleDisponible entity by IDs.
func (sc *SalleCreate) AddDisponibiliteIDs(ids ...int) *SalleCreate {
	sc.mutation.AddDisponibiliteIDs(ids...)
	return sc
}

// AddDisponibilite adds the "disponibilite" edges to the SalleDisponible entity.
func (sc *SalleCreate) AddDisponibilite(s ...*SalleDisponible) *SalleCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddDisponibiliteIDs(ids...)
}

// Mutation returns the SalleMutation object of the builder.
func (sc *SalleCreate) Mutation() *SalleMutation {
	return sc.mutation
}

// Save creates the Salle in the database.
func (sc *SalleCreate) Save(ctx context.Context) (*Salle, error) {
	return withHooks[*Salle, SalleMutation](ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SalleCreate) SaveX(ctx context.Context) *Salle {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SalleCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SalleCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SalleCreate) check() error {
	if _, ok := sc.mutation.Nom(); !ok {
		return &ValidationError{Name: "nom", err: errors.New(`ent: missing required field "Salle.nom"`)}
	}
	if _, ok := sc.mutation.Batiment(); !ok {
		return &ValidationError{Name: "batiment", err: errors.New(`ent: missing required field "Salle.batiment"`)}
	}
	if _, ok := sc.mutation.Etage(); !ok {
		return &ValidationError{Name: "etage", err: errors.New(`ent: missing required field "Salle.etage"`)}
	}
	if _, ok := sc.mutation.NumSalle(); !ok {
		return &ValidationError{Name: "num_salle", err: errors.New(`ent: missing required field "Salle.num_salle"`)}
	}
	if _, ok := sc.mutation.CapMax(); !ok {
		return &ValidationError{Name: "cap_max", err: errors.New(`ent: missing required field "Salle.cap_max"`)}
	}
	return nil
}

func (sc *SalleCreate) sqlSave(ctx context.Context) (*Salle, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SalleCreate) createSpec() (*Salle, *sqlgraph.CreateSpec) {
	var (
		_node = &Salle{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: salle.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: salle.FieldID,
			},
		}
	)
	if value, ok := sc.mutation.Nom(); ok {
		_spec.SetField(salle.FieldNom, field.TypeString, value)
		_node.Nom = value
	}
	if value, ok := sc.mutation.Batiment(); ok {
		_spec.SetField(salle.FieldBatiment, field.TypeString, value)
		_node.Batiment = value
	}
	if value, ok := sc.mutation.Etage(); ok {
		_spec.SetField(salle.FieldEtage, field.TypeString, value)
		_node.Etage = value
	}
	if value, ok := sc.mutation.NumSalle(); ok {
		_spec.SetField(salle.FieldNumSalle, field.TypeString, value)
		_node.NumSalle = value
	}
	if value, ok := sc.mutation.CapMax(); ok {
		_spec.SetField(salle.FieldCapMax, field.TypeInt, value)
		_node.CapMax = value
	}
	if nodes := sc.mutation.ProfilReservationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   salle.ProfilReservationTable,
			Columns: salle.ProfilReservationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.DisponibiliteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   salle.DisponibiliteTable,
			Columns: []string{salle.DisponibiliteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: salledisponible.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SalleCreateBulk is the builder for creating many Salle entities in bulk.
type SalleCreateBulk struct {
	config
	builders []*SalleCreate
}

// Save creates the Salle entities in the database.
func (scb *SalleCreateBulk) Save(ctx context.Context) ([]*Salle, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Salle, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SalleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SalleCreateBulk) SaveX(ctx context.Context) []*Salle {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SalleCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SalleCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
