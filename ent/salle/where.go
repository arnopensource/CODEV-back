// Code generated by ent, DO NOT EDIT.

package salle

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/abc3354/CODEV-back/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Salle {
	return predicate.Salle(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Salle {
	return predicate.Salle(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Salle {
	return predicate.Salle(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Salle {
	return predicate.Salle(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Salle {
	return predicate.Salle(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Salle {
	return predicate.Salle(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Salle {
	return predicate.Salle(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Salle {
	return predicate.Salle(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Salle {
	return predicate.Salle(sql.FieldLTE(FieldID, id))
}

// Nom applies equality check predicate on the "nom" field. It's identical to NomEQ.
func Nom(v string) predicate.Salle {
	return predicate.Salle(sql.FieldEQ(FieldNom, v))
}

// Batiment applies equality check predicate on the "batiment" field. It's identical to BatimentEQ.
func Batiment(v string) predicate.Salle {
	return predicate.Salle(sql.FieldEQ(FieldBatiment, v))
}

// Etage applies equality check predicate on the "etage" field. It's identical to EtageEQ.
func Etage(v string) predicate.Salle {
	return predicate.Salle(sql.FieldEQ(FieldEtage, v))
}

// NumSalle applies equality check predicate on the "num_salle" field. It's identical to NumSalleEQ.
func NumSalle(v string) predicate.Salle {
	return predicate.Salle(sql.FieldEQ(FieldNumSalle, v))
}

// CapMax applies equality check predicate on the "cap_max" field. It's identical to CapMaxEQ.
func CapMax(v int) predicate.Salle {
	return predicate.Salle(sql.FieldEQ(FieldCapMax, v))
}

// NomEQ applies the EQ predicate on the "nom" field.
func NomEQ(v string) predicate.Salle {
	return predicate.Salle(sql.FieldEQ(FieldNom, v))
}

// NomNEQ applies the NEQ predicate on the "nom" field.
func NomNEQ(v string) predicate.Salle {
	return predicate.Salle(sql.FieldNEQ(FieldNom, v))
}

// NomIn applies the In predicate on the "nom" field.
func NomIn(vs ...string) predicate.Salle {
	return predicate.Salle(sql.FieldIn(FieldNom, vs...))
}

// NomNotIn applies the NotIn predicate on the "nom" field.
func NomNotIn(vs ...string) predicate.Salle {
	return predicate.Salle(sql.FieldNotIn(FieldNom, vs...))
}

// NomGT applies the GT predicate on the "nom" field.
func NomGT(v string) predicate.Salle {
	return predicate.Salle(sql.FieldGT(FieldNom, v))
}

// NomGTE applies the GTE predicate on the "nom" field.
func NomGTE(v string) predicate.Salle {
	return predicate.Salle(sql.FieldGTE(FieldNom, v))
}

// NomLT applies the LT predicate on the "nom" field.
func NomLT(v string) predicate.Salle {
	return predicate.Salle(sql.FieldLT(FieldNom, v))
}

// NomLTE applies the LTE predicate on the "nom" field.
func NomLTE(v string) predicate.Salle {
	return predicate.Salle(sql.FieldLTE(FieldNom, v))
}

// NomContains applies the Contains predicate on the "nom" field.
func NomContains(v string) predicate.Salle {
	return predicate.Salle(sql.FieldContains(FieldNom, v))
}

// NomHasPrefix applies the HasPrefix predicate on the "nom" field.
func NomHasPrefix(v string) predicate.Salle {
	return predicate.Salle(sql.FieldHasPrefix(FieldNom, v))
}

// NomHasSuffix applies the HasSuffix predicate on the "nom" field.
func NomHasSuffix(v string) predicate.Salle {
	return predicate.Salle(sql.FieldHasSuffix(FieldNom, v))
}

// NomEqualFold applies the EqualFold predicate on the "nom" field.
func NomEqualFold(v string) predicate.Salle {
	return predicate.Salle(sql.FieldEqualFold(FieldNom, v))
}

// NomContainsFold applies the ContainsFold predicate on the "nom" field.
func NomContainsFold(v string) predicate.Salle {
	return predicate.Salle(sql.FieldContainsFold(FieldNom, v))
}

// BatimentEQ applies the EQ predicate on the "batiment" field.
func BatimentEQ(v string) predicate.Salle {
	return predicate.Salle(sql.FieldEQ(FieldBatiment, v))
}

// BatimentNEQ applies the NEQ predicate on the "batiment" field.
func BatimentNEQ(v string) predicate.Salle {
	return predicate.Salle(sql.FieldNEQ(FieldBatiment, v))
}

// BatimentIn applies the In predicate on the "batiment" field.
func BatimentIn(vs ...string) predicate.Salle {
	return predicate.Salle(sql.FieldIn(FieldBatiment, vs...))
}

// BatimentNotIn applies the NotIn predicate on the "batiment" field.
func BatimentNotIn(vs ...string) predicate.Salle {
	return predicate.Salle(sql.FieldNotIn(FieldBatiment, vs...))
}

// BatimentGT applies the GT predicate on the "batiment" field.
func BatimentGT(v string) predicate.Salle {
	return predicate.Salle(sql.FieldGT(FieldBatiment, v))
}

// BatimentGTE applies the GTE predicate on the "batiment" field.
func BatimentGTE(v string) predicate.Salle {
	return predicate.Salle(sql.FieldGTE(FieldBatiment, v))
}

// BatimentLT applies the LT predicate on the "batiment" field.
func BatimentLT(v string) predicate.Salle {
	return predicate.Salle(sql.FieldLT(FieldBatiment, v))
}

// BatimentLTE applies the LTE predicate on the "batiment" field.
func BatimentLTE(v string) predicate.Salle {
	return predicate.Salle(sql.FieldLTE(FieldBatiment, v))
}

// BatimentContains applies the Contains predicate on the "batiment" field.
func BatimentContains(v string) predicate.Salle {
	return predicate.Salle(sql.FieldContains(FieldBatiment, v))
}

// BatimentHasPrefix applies the HasPrefix predicate on the "batiment" field.
func BatimentHasPrefix(v string) predicate.Salle {
	return predicate.Salle(sql.FieldHasPrefix(FieldBatiment, v))
}

// BatimentHasSuffix applies the HasSuffix predicate on the "batiment" field.
func BatimentHasSuffix(v string) predicate.Salle {
	return predicate.Salle(sql.FieldHasSuffix(FieldBatiment, v))
}

// BatimentEqualFold applies the EqualFold predicate on the "batiment" field.
func BatimentEqualFold(v string) predicate.Salle {
	return predicate.Salle(sql.FieldEqualFold(FieldBatiment, v))
}

// BatimentContainsFold applies the ContainsFold predicate on the "batiment" field.
func BatimentContainsFold(v string) predicate.Salle {
	return predicate.Salle(sql.FieldContainsFold(FieldBatiment, v))
}

// EtageEQ applies the EQ predicate on the "etage" field.
func EtageEQ(v string) predicate.Salle {
	return predicate.Salle(sql.FieldEQ(FieldEtage, v))
}

// EtageNEQ applies the NEQ predicate on the "etage" field.
func EtageNEQ(v string) predicate.Salle {
	return predicate.Salle(sql.FieldNEQ(FieldEtage, v))
}

// EtageIn applies the In predicate on the "etage" field.
func EtageIn(vs ...string) predicate.Salle {
	return predicate.Salle(sql.FieldIn(FieldEtage, vs...))
}

// EtageNotIn applies the NotIn predicate on the "etage" field.
func EtageNotIn(vs ...string) predicate.Salle {
	return predicate.Salle(sql.FieldNotIn(FieldEtage, vs...))
}

// EtageGT applies the GT predicate on the "etage" field.
func EtageGT(v string) predicate.Salle {
	return predicate.Salle(sql.FieldGT(FieldEtage, v))
}

// EtageGTE applies the GTE predicate on the "etage" field.
func EtageGTE(v string) predicate.Salle {
	return predicate.Salle(sql.FieldGTE(FieldEtage, v))
}

// EtageLT applies the LT predicate on the "etage" field.
func EtageLT(v string) predicate.Salle {
	return predicate.Salle(sql.FieldLT(FieldEtage, v))
}

// EtageLTE applies the LTE predicate on the "etage" field.
func EtageLTE(v string) predicate.Salle {
	return predicate.Salle(sql.FieldLTE(FieldEtage, v))
}

// EtageContains applies the Contains predicate on the "etage" field.
func EtageContains(v string) predicate.Salle {
	return predicate.Salle(sql.FieldContains(FieldEtage, v))
}

// EtageHasPrefix applies the HasPrefix predicate on the "etage" field.
func EtageHasPrefix(v string) predicate.Salle {
	return predicate.Salle(sql.FieldHasPrefix(FieldEtage, v))
}

// EtageHasSuffix applies the HasSuffix predicate on the "etage" field.
func EtageHasSuffix(v string) predicate.Salle {
	return predicate.Salle(sql.FieldHasSuffix(FieldEtage, v))
}

// EtageEqualFold applies the EqualFold predicate on the "etage" field.
func EtageEqualFold(v string) predicate.Salle {
	return predicate.Salle(sql.FieldEqualFold(FieldEtage, v))
}

// EtageContainsFold applies the ContainsFold predicate on the "etage" field.
func EtageContainsFold(v string) predicate.Salle {
	return predicate.Salle(sql.FieldContainsFold(FieldEtage, v))
}

// NumSalleEQ applies the EQ predicate on the "num_salle" field.
func NumSalleEQ(v string) predicate.Salle {
	return predicate.Salle(sql.FieldEQ(FieldNumSalle, v))
}

// NumSalleNEQ applies the NEQ predicate on the "num_salle" field.
func NumSalleNEQ(v string) predicate.Salle {
	return predicate.Salle(sql.FieldNEQ(FieldNumSalle, v))
}

// NumSalleIn applies the In predicate on the "num_salle" field.
func NumSalleIn(vs ...string) predicate.Salle {
	return predicate.Salle(sql.FieldIn(FieldNumSalle, vs...))
}

// NumSalleNotIn applies the NotIn predicate on the "num_salle" field.
func NumSalleNotIn(vs ...string) predicate.Salle {
	return predicate.Salle(sql.FieldNotIn(FieldNumSalle, vs...))
}

// NumSalleGT applies the GT predicate on the "num_salle" field.
func NumSalleGT(v string) predicate.Salle {
	return predicate.Salle(sql.FieldGT(FieldNumSalle, v))
}

// NumSalleGTE applies the GTE predicate on the "num_salle" field.
func NumSalleGTE(v string) predicate.Salle {
	return predicate.Salle(sql.FieldGTE(FieldNumSalle, v))
}

// NumSalleLT applies the LT predicate on the "num_salle" field.
func NumSalleLT(v string) predicate.Salle {
	return predicate.Salle(sql.FieldLT(FieldNumSalle, v))
}

// NumSalleLTE applies the LTE predicate on the "num_salle" field.
func NumSalleLTE(v string) predicate.Salle {
	return predicate.Salle(sql.FieldLTE(FieldNumSalle, v))
}

// NumSalleContains applies the Contains predicate on the "num_salle" field.
func NumSalleContains(v string) predicate.Salle {
	return predicate.Salle(sql.FieldContains(FieldNumSalle, v))
}

// NumSalleHasPrefix applies the HasPrefix predicate on the "num_salle" field.
func NumSalleHasPrefix(v string) predicate.Salle {
	return predicate.Salle(sql.FieldHasPrefix(FieldNumSalle, v))
}

// NumSalleHasSuffix applies the HasSuffix predicate on the "num_salle" field.
func NumSalleHasSuffix(v string) predicate.Salle {
	return predicate.Salle(sql.FieldHasSuffix(FieldNumSalle, v))
}

// NumSalleEqualFold applies the EqualFold predicate on the "num_salle" field.
func NumSalleEqualFold(v string) predicate.Salle {
	return predicate.Salle(sql.FieldEqualFold(FieldNumSalle, v))
}

// NumSalleContainsFold applies the ContainsFold predicate on the "num_salle" field.
func NumSalleContainsFold(v string) predicate.Salle {
	return predicate.Salle(sql.FieldContainsFold(FieldNumSalle, v))
}

// CapMaxEQ applies the EQ predicate on the "cap_max" field.
func CapMaxEQ(v int) predicate.Salle {
	return predicate.Salle(sql.FieldEQ(FieldCapMax, v))
}

// CapMaxNEQ applies the NEQ predicate on the "cap_max" field.
func CapMaxNEQ(v int) predicate.Salle {
	return predicate.Salle(sql.FieldNEQ(FieldCapMax, v))
}

// CapMaxIn applies the In predicate on the "cap_max" field.
func CapMaxIn(vs ...int) predicate.Salle {
	return predicate.Salle(sql.FieldIn(FieldCapMax, vs...))
}

// CapMaxNotIn applies the NotIn predicate on the "cap_max" field.
func CapMaxNotIn(vs ...int) predicate.Salle {
	return predicate.Salle(sql.FieldNotIn(FieldCapMax, vs...))
}

// CapMaxGT applies the GT predicate on the "cap_max" field.
func CapMaxGT(v int) predicate.Salle {
	return predicate.Salle(sql.FieldGT(FieldCapMax, v))
}

// CapMaxGTE applies the GTE predicate on the "cap_max" field.
func CapMaxGTE(v int) predicate.Salle {
	return predicate.Salle(sql.FieldGTE(FieldCapMax, v))
}

// CapMaxLT applies the LT predicate on the "cap_max" field.
func CapMaxLT(v int) predicate.Salle {
	return predicate.Salle(sql.FieldLT(FieldCapMax, v))
}

// CapMaxLTE applies the LTE predicate on the "cap_max" field.
func CapMaxLTE(v int) predicate.Salle {
	return predicate.Salle(sql.FieldLTE(FieldCapMax, v))
}

// HasProfilReservation applies the HasEdge predicate on the "profil_reservation" edge.
func HasProfilReservation() predicate.Salle {
	return predicate.Salle(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ProfilReservationTable, ProfilReservationPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProfilReservationWith applies the HasEdge predicate on the "profil_reservation" edge with a given conditions (other predicates).
func HasProfilReservationWith(preds ...predicate.Profile) predicate.Salle {
	return predicate.Salle(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProfilReservationInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ProfilReservationTable, ProfilReservationPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDisponibilite applies the HasEdge predicate on the "disponibilite" edge.
func HasDisponibilite() predicate.Salle {
	return predicate.Salle(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DisponibiliteTable, DisponibiliteColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDisponibiliteWith applies the HasEdge predicate on the "disponibilite" edge with a given conditions (other predicates).
func HasDisponibiliteWith(preds ...predicate.SalleDisponible) predicate.Salle {
	return predicate.Salle(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DisponibiliteInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DisponibiliteTable, DisponibiliteColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReservations applies the HasEdge predicate on the "reservations" edge.
func HasReservations() predicate.Salle {
	return predicate.Salle(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ReservationsTable, ReservationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReservationsWith applies the HasEdge predicate on the "reservations" edge with a given conditions (other predicates).
func HasReservationsWith(preds ...predicate.Reservation) predicate.Salle {
	return predicate.Salle(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReservationsInverseTable, ReservationsColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, ReservationsTable, ReservationsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Salle) predicate.Salle {
	return predicate.Salle(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Salle) predicate.Salle {
	return predicate.Salle(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Salle) predicate.Salle {
	return predicate.Salle(func(s *sql.Selector) {
		p(s.Not())
	})
}
