// Code generated by ent, DO NOT EDIT.

package reservation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/abc3354/CODEV-back/ent/predicate"
	"github.com/google/uuid"
)

// ProfileID applies equality check predicate on the "profile_id" field. It's identical to ProfileIDEQ.
func ProfileID(v uuid.UUID) predicate.Reservation {
	return predicate.Reservation(sql.FieldEQ(FieldProfileID, v))
}

// SalleID applies equality check predicate on the "salle_id" field. It's identical to SalleIDEQ.
func SalleID(v int) predicate.Reservation {
	return predicate.Reservation(sql.FieldEQ(FieldSalleID, v))
}

// QuantityStudents applies equality check predicate on the "quantity_students" field. It's identical to QuantityStudentsEQ.
func QuantityStudents(v int) predicate.Reservation {
	return predicate.Reservation(sql.FieldEQ(FieldQuantityStudents, v))
}

// HoraireResInitial applies equality check predicate on the "horaire_res_initial" field. It's identical to HoraireResInitialEQ.
func HoraireResInitial(v time.Time) predicate.Reservation {
	return predicate.Reservation(sql.FieldEQ(FieldHoraireResInitial, v))
}

// HoraireResFinal applies equality check predicate on the "horaire_res_final" field. It's identical to HoraireResFinalEQ.
func HoraireResFinal(v time.Time) predicate.Reservation {
	return predicate.Reservation(sql.FieldEQ(FieldHoraireResFinal, v))
}

// HoraireAct applies equality check predicate on the "horaire_act" field. It's identical to HoraireActEQ.
func HoraireAct(v time.Time) predicate.Reservation {
	return predicate.Reservation(sql.FieldEQ(FieldHoraireAct, v))
}

// ProfileIDEQ applies the EQ predicate on the "profile_id" field.
func ProfileIDEQ(v uuid.UUID) predicate.Reservation {
	return predicate.Reservation(sql.FieldEQ(FieldProfileID, v))
}

// ProfileIDNEQ applies the NEQ predicate on the "profile_id" field.
func ProfileIDNEQ(v uuid.UUID) predicate.Reservation {
	return predicate.Reservation(sql.FieldNEQ(FieldProfileID, v))
}

// ProfileIDIn applies the In predicate on the "profile_id" field.
func ProfileIDIn(vs ...uuid.UUID) predicate.Reservation {
	return predicate.Reservation(sql.FieldIn(FieldProfileID, vs...))
}

// ProfileIDNotIn applies the NotIn predicate on the "profile_id" field.
func ProfileIDNotIn(vs ...uuid.UUID) predicate.Reservation {
	return predicate.Reservation(sql.FieldNotIn(FieldProfileID, vs...))
}

// SalleIDEQ applies the EQ predicate on the "salle_id" field.
func SalleIDEQ(v int) predicate.Reservation {
	return predicate.Reservation(sql.FieldEQ(FieldSalleID, v))
}

// SalleIDNEQ applies the NEQ predicate on the "salle_id" field.
func SalleIDNEQ(v int) predicate.Reservation {
	return predicate.Reservation(sql.FieldNEQ(FieldSalleID, v))
}

// SalleIDIn applies the In predicate on the "salle_id" field.
func SalleIDIn(vs ...int) predicate.Reservation {
	return predicate.Reservation(sql.FieldIn(FieldSalleID, vs...))
}

// SalleIDNotIn applies the NotIn predicate on the "salle_id" field.
func SalleIDNotIn(vs ...int) predicate.Reservation {
	return predicate.Reservation(sql.FieldNotIn(FieldSalleID, vs...))
}

// QuantityStudentsEQ applies the EQ predicate on the "quantity_students" field.
func QuantityStudentsEQ(v int) predicate.Reservation {
	return predicate.Reservation(sql.FieldEQ(FieldQuantityStudents, v))
}

// QuantityStudentsNEQ applies the NEQ predicate on the "quantity_students" field.
func QuantityStudentsNEQ(v int) predicate.Reservation {
	return predicate.Reservation(sql.FieldNEQ(FieldQuantityStudents, v))
}

// QuantityStudentsIn applies the In predicate on the "quantity_students" field.
func QuantityStudentsIn(vs ...int) predicate.Reservation {
	return predicate.Reservation(sql.FieldIn(FieldQuantityStudents, vs...))
}

// QuantityStudentsNotIn applies the NotIn predicate on the "quantity_students" field.
func QuantityStudentsNotIn(vs ...int) predicate.Reservation {
	return predicate.Reservation(sql.FieldNotIn(FieldQuantityStudents, vs...))
}

// QuantityStudentsGT applies the GT predicate on the "quantity_students" field.
func QuantityStudentsGT(v int) predicate.Reservation {
	return predicate.Reservation(sql.FieldGT(FieldQuantityStudents, v))
}

// QuantityStudentsGTE applies the GTE predicate on the "quantity_students" field.
func QuantityStudentsGTE(v int) predicate.Reservation {
	return predicate.Reservation(sql.FieldGTE(FieldQuantityStudents, v))
}

// QuantityStudentsLT applies the LT predicate on the "quantity_students" field.
func QuantityStudentsLT(v int) predicate.Reservation {
	return predicate.Reservation(sql.FieldLT(FieldQuantityStudents, v))
}

// QuantityStudentsLTE applies the LTE predicate on the "quantity_students" field.
func QuantityStudentsLTE(v int) predicate.Reservation {
	return predicate.Reservation(sql.FieldLTE(FieldQuantityStudents, v))
}

// HoraireResInitialEQ applies the EQ predicate on the "horaire_res_initial" field.
func HoraireResInitialEQ(v time.Time) predicate.Reservation {
	return predicate.Reservation(sql.FieldEQ(FieldHoraireResInitial, v))
}

// HoraireResInitialNEQ applies the NEQ predicate on the "horaire_res_initial" field.
func HoraireResInitialNEQ(v time.Time) predicate.Reservation {
	return predicate.Reservation(sql.FieldNEQ(FieldHoraireResInitial, v))
}

// HoraireResInitialIn applies the In predicate on the "horaire_res_initial" field.
func HoraireResInitialIn(vs ...time.Time) predicate.Reservation {
	return predicate.Reservation(sql.FieldIn(FieldHoraireResInitial, vs...))
}

// HoraireResInitialNotIn applies the NotIn predicate on the "horaire_res_initial" field.
func HoraireResInitialNotIn(vs ...time.Time) predicate.Reservation {
	return predicate.Reservation(sql.FieldNotIn(FieldHoraireResInitial, vs...))
}

// HoraireResInitialGT applies the GT predicate on the "horaire_res_initial" field.
func HoraireResInitialGT(v time.Time) predicate.Reservation {
	return predicate.Reservation(sql.FieldGT(FieldHoraireResInitial, v))
}

// HoraireResInitialGTE applies the GTE predicate on the "horaire_res_initial" field.
func HoraireResInitialGTE(v time.Time) predicate.Reservation {
	return predicate.Reservation(sql.FieldGTE(FieldHoraireResInitial, v))
}

// HoraireResInitialLT applies the LT predicate on the "horaire_res_initial" field.
func HoraireResInitialLT(v time.Time) predicate.Reservation {
	return predicate.Reservation(sql.FieldLT(FieldHoraireResInitial, v))
}

// HoraireResInitialLTE applies the LTE predicate on the "horaire_res_initial" field.
func HoraireResInitialLTE(v time.Time) predicate.Reservation {
	return predicate.Reservation(sql.FieldLTE(FieldHoraireResInitial, v))
}

// HoraireResFinalEQ applies the EQ predicate on the "horaire_res_final" field.
func HoraireResFinalEQ(v time.Time) predicate.Reservation {
	return predicate.Reservation(sql.FieldEQ(FieldHoraireResFinal, v))
}

// HoraireResFinalNEQ applies the NEQ predicate on the "horaire_res_final" field.
func HoraireResFinalNEQ(v time.Time) predicate.Reservation {
	return predicate.Reservation(sql.FieldNEQ(FieldHoraireResFinal, v))
}

// HoraireResFinalIn applies the In predicate on the "horaire_res_final" field.
func HoraireResFinalIn(vs ...time.Time) predicate.Reservation {
	return predicate.Reservation(sql.FieldIn(FieldHoraireResFinal, vs...))
}

// HoraireResFinalNotIn applies the NotIn predicate on the "horaire_res_final" field.
func HoraireResFinalNotIn(vs ...time.Time) predicate.Reservation {
	return predicate.Reservation(sql.FieldNotIn(FieldHoraireResFinal, vs...))
}

// HoraireResFinalGT applies the GT predicate on the "horaire_res_final" field.
func HoraireResFinalGT(v time.Time) predicate.Reservation {
	return predicate.Reservation(sql.FieldGT(FieldHoraireResFinal, v))
}

// HoraireResFinalGTE applies the GTE predicate on the "horaire_res_final" field.
func HoraireResFinalGTE(v time.Time) predicate.Reservation {
	return predicate.Reservation(sql.FieldGTE(FieldHoraireResFinal, v))
}

// HoraireResFinalLT applies the LT predicate on the "horaire_res_final" field.
func HoraireResFinalLT(v time.Time) predicate.Reservation {
	return predicate.Reservation(sql.FieldLT(FieldHoraireResFinal, v))
}

// HoraireResFinalLTE applies the LTE predicate on the "horaire_res_final" field.
func HoraireResFinalLTE(v time.Time) predicate.Reservation {
	return predicate.Reservation(sql.FieldLTE(FieldHoraireResFinal, v))
}

// HoraireActEQ applies the EQ predicate on the "horaire_act" field.
func HoraireActEQ(v time.Time) predicate.Reservation {
	return predicate.Reservation(sql.FieldEQ(FieldHoraireAct, v))
}

// HoraireActNEQ applies the NEQ predicate on the "horaire_act" field.
func HoraireActNEQ(v time.Time) predicate.Reservation {
	return predicate.Reservation(sql.FieldNEQ(FieldHoraireAct, v))
}

// HoraireActIn applies the In predicate on the "horaire_act" field.
func HoraireActIn(vs ...time.Time) predicate.Reservation {
	return predicate.Reservation(sql.FieldIn(FieldHoraireAct, vs...))
}

// HoraireActNotIn applies the NotIn predicate on the "horaire_act" field.
func HoraireActNotIn(vs ...time.Time) predicate.Reservation {
	return predicate.Reservation(sql.FieldNotIn(FieldHoraireAct, vs...))
}

// HoraireActGT applies the GT predicate on the "horaire_act" field.
func HoraireActGT(v time.Time) predicate.Reservation {
	return predicate.Reservation(sql.FieldGT(FieldHoraireAct, v))
}

// HoraireActGTE applies the GTE predicate on the "horaire_act" field.
func HoraireActGTE(v time.Time) predicate.Reservation {
	return predicate.Reservation(sql.FieldGTE(FieldHoraireAct, v))
}

// HoraireActLT applies the LT predicate on the "horaire_act" field.
func HoraireActLT(v time.Time) predicate.Reservation {
	return predicate.Reservation(sql.FieldLT(FieldHoraireAct, v))
}

// HoraireActLTE applies the LTE predicate on the "horaire_act" field.
func HoraireActLTE(v time.Time) predicate.Reservation {
	return predicate.Reservation(sql.FieldLTE(FieldHoraireAct, v))
}

// HasProfile applies the HasEdge predicate on the "profile" edge.
func HasProfile() predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, ProfileColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, ProfileTable, ProfileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProfileWith applies the HasEdge predicate on the "profile" edge with a given conditions (other predicates).
func HasProfileWith(preds ...predicate.Profile) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, ProfileColumn),
			sqlgraph.To(ProfileInverseTable, ProfileFieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProfileTable, ProfileColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSalle applies the HasEdge predicate on the "salle" edge.
func HasSalle() predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, SalleColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, SalleTable, SalleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSalleWith applies the HasEdge predicate on the "salle" edge with a given conditions (other predicates).
func HasSalleWith(preds ...predicate.Salle) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, SalleColumn),
			sqlgraph.To(SalleInverseTable, SalleFieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SalleTable, SalleColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Reservation) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Reservation) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Reservation) predicate.Reservation {
	return predicate.Reservation(func(s *sql.Selector) {
		p(s.Not())
	})
}
