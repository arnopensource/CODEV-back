// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/abc3354/CODEV-back/ent/availableroom"
	"github.com/abc3354/CODEV-back/ent/predicate"
	"github.com/abc3354/CODEV-back/ent/room"
)

// AvailableRoomUpdate is the builder for updating AvailableRoom entities.
type AvailableRoomUpdate struct {
	config
	hooks    []Hook
	mutation *AvailableRoomMutation
}

// Where appends a list predicates to the AvailableRoomUpdate builder.
func (aru *AvailableRoomUpdate) Where(ps ...predicate.AvailableRoom) *AvailableRoomUpdate {
	aru.mutation.Where(ps...)
	return aru
}

// SetRoomID sets the "room_id" field.
func (aru *AvailableRoomUpdate) SetRoomID(s string) *AvailableRoomUpdate {
	aru.mutation.SetRoomID(s)
	return aru
}

// SetStart sets the "start" field.
func (aru *AvailableRoomUpdate) SetStart(t time.Time) *AvailableRoomUpdate {
	aru.mutation.SetStart(t)
	return aru
}

// SetEnd sets the "end" field.
func (aru *AvailableRoomUpdate) SetEnd(t time.Time) *AvailableRoomUpdate {
	aru.mutation.SetEnd(t)
	return aru
}

// SetRoomsID sets the "rooms" edge to the Room entity by ID.
func (aru *AvailableRoomUpdate) SetRoomsID(id int) *AvailableRoomUpdate {
	aru.mutation.SetRoomsID(id)
	return aru
}

// SetNillableRoomsID sets the "rooms" edge to the Room entity by ID if the given value is not nil.
func (aru *AvailableRoomUpdate) SetNillableRoomsID(id *int) *AvailableRoomUpdate {
	if id != nil {
		aru = aru.SetRoomsID(*id)
	}
	return aru
}

// SetRooms sets the "rooms" edge to the Room entity.
func (aru *AvailableRoomUpdate) SetRooms(r *Room) *AvailableRoomUpdate {
	return aru.SetRoomsID(r.ID)
}

// Mutation returns the AvailableRoomMutation object of the builder.
func (aru *AvailableRoomUpdate) Mutation() *AvailableRoomMutation {
	return aru.mutation
}

// ClearRooms clears the "rooms" edge to the Room entity.
func (aru *AvailableRoomUpdate) ClearRooms() *AvailableRoomUpdate {
	aru.mutation.ClearRooms()
	return aru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aru *AvailableRoomUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, AvailableRoomMutation](ctx, aru.sqlSave, aru.mutation, aru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aru *AvailableRoomUpdate) SaveX(ctx context.Context) int {
	affected, err := aru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aru *AvailableRoomUpdate) Exec(ctx context.Context) error {
	_, err := aru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aru *AvailableRoomUpdate) ExecX(ctx context.Context) {
	if err := aru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aru *AvailableRoomUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   availableroom.Table,
			Columns: availableroom.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: availableroom.FieldID,
			},
		},
	}
	if ps := aru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aru.mutation.RoomID(); ok {
		_spec.SetField(availableroom.FieldRoomID, field.TypeString, value)
	}
	if value, ok := aru.mutation.Start(); ok {
		_spec.SetField(availableroom.FieldStart, field.TypeTime, value)
	}
	if value, ok := aru.mutation.End(); ok {
		_spec.SetField(availableroom.FieldEnd, field.TypeTime, value)
	}
	if aru.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   availableroom.RoomsTable,
			Columns: []string{availableroom.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.RoomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   availableroom.RoomsTable,
			Columns: []string{availableroom.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{availableroom.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aru.mutation.done = true
	return n, nil
}

// AvailableRoomUpdateOne is the builder for updating a single AvailableRoom entity.
type AvailableRoomUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AvailableRoomMutation
}

// SetRoomID sets the "room_id" field.
func (aruo *AvailableRoomUpdateOne) SetRoomID(s string) *AvailableRoomUpdateOne {
	aruo.mutation.SetRoomID(s)
	return aruo
}

// SetStart sets the "start" field.
func (aruo *AvailableRoomUpdateOne) SetStart(t time.Time) *AvailableRoomUpdateOne {
	aruo.mutation.SetStart(t)
	return aruo
}

// SetEnd sets the "end" field.
func (aruo *AvailableRoomUpdateOne) SetEnd(t time.Time) *AvailableRoomUpdateOne {
	aruo.mutation.SetEnd(t)
	return aruo
}

// SetRoomsID sets the "rooms" edge to the Room entity by ID.
func (aruo *AvailableRoomUpdateOne) SetRoomsID(id int) *AvailableRoomUpdateOne {
	aruo.mutation.SetRoomsID(id)
	return aruo
}

// SetNillableRoomsID sets the "rooms" edge to the Room entity by ID if the given value is not nil.
func (aruo *AvailableRoomUpdateOne) SetNillableRoomsID(id *int) *AvailableRoomUpdateOne {
	if id != nil {
		aruo = aruo.SetRoomsID(*id)
	}
	return aruo
}

// SetRooms sets the "rooms" edge to the Room entity.
func (aruo *AvailableRoomUpdateOne) SetRooms(r *Room) *AvailableRoomUpdateOne {
	return aruo.SetRoomsID(r.ID)
}

// Mutation returns the AvailableRoomMutation object of the builder.
func (aruo *AvailableRoomUpdateOne) Mutation() *AvailableRoomMutation {
	return aruo.mutation
}

// ClearRooms clears the "rooms" edge to the Room entity.
func (aruo *AvailableRoomUpdateOne) ClearRooms() *AvailableRoomUpdateOne {
	aruo.mutation.ClearRooms()
	return aruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aruo *AvailableRoomUpdateOne) Select(field string, fields ...string) *AvailableRoomUpdateOne {
	aruo.fields = append([]string{field}, fields...)
	return aruo
}

// Save executes the query and returns the updated AvailableRoom entity.
func (aruo *AvailableRoomUpdateOne) Save(ctx context.Context) (*AvailableRoom, error) {
	return withHooks[*AvailableRoom, AvailableRoomMutation](ctx, aruo.sqlSave, aruo.mutation, aruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aruo *AvailableRoomUpdateOne) SaveX(ctx context.Context) *AvailableRoom {
	node, err := aruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aruo *AvailableRoomUpdateOne) Exec(ctx context.Context) error {
	_, err := aruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aruo *AvailableRoomUpdateOne) ExecX(ctx context.Context) {
	if err := aruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aruo *AvailableRoomUpdateOne) sqlSave(ctx context.Context) (_node *AvailableRoom, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   availableroom.Table,
			Columns: availableroom.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: availableroom.FieldID,
			},
		},
	}
	id, ok := aruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AvailableRoom.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, availableroom.FieldID)
		for _, f := range fields {
			if !availableroom.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != availableroom.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aruo.mutation.RoomID(); ok {
		_spec.SetField(availableroom.FieldRoomID, field.TypeString, value)
	}
	if value, ok := aruo.mutation.Start(); ok {
		_spec.SetField(availableroom.FieldStart, field.TypeTime, value)
	}
	if value, ok := aruo.mutation.End(); ok {
		_spec.SetField(availableroom.FieldEnd, field.TypeTime, value)
	}
	if aruo.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   availableroom.RoomsTable,
			Columns: []string{availableroom.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.RoomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   availableroom.RoomsTable,
			Columns: []string{availableroom.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AvailableRoom{config: aruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{availableroom.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aruo.mutation.done = true
	return _node, nil
}
