// Code generated by ent, DO NOT EDIT.

package networking

const (
	// Label holds the string label denoting the networking type in the database.
	Label = "networking"
	// FieldProfileID holds the string denoting the profile_id field in the database.
	FieldProfileID = "profile_id"
	// FieldFriendID holds the string denoting the friend_id field in the database.
	FieldFriendID = "friend_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldAccepted holds the string denoting the accepted field in the database.
	FieldAccepted = "accepted"
	// EdgeProfile holds the string denoting the profile edge name in mutations.
	EdgeProfile = "profile"
	// EdgeFriend holds the string denoting the friend edge name in mutations.
	EdgeFriend = "friend"
	// ProfileFieldID holds the string denoting the ID field of the Profile.
	ProfileFieldID = "id"
	// Table holds the table name of the networking in the database.
	Table = "networkings"
	// ProfileTable is the table that holds the profile relation/edge.
	ProfileTable = "networkings"
	// ProfileInverseTable is the table name for the Profile entity.
	// It exists in this package in order to avoid circular dependency with the "profile" package.
	ProfileInverseTable = "profiles"
	// ProfileColumn is the table column denoting the profile relation/edge.
	ProfileColumn = "profile_id"
	// FriendTable is the table that holds the friend relation/edge.
	FriendTable = "networkings"
	// FriendInverseTable is the table name for the Profile entity.
	// It exists in this package in order to avoid circular dependency with the "profile" package.
	FriendInverseTable = "profiles"
	// FriendColumn is the table column denoting the friend relation/edge.
	FriendColumn = "friend_id"
)

// Columns holds all SQL columns for networking fields.
var Columns = []string{
	FieldProfileID,
	FieldFriendID,
	FieldCreatedAt,
	FieldAccepted,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
