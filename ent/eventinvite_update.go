// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/abc3354/CODEV-back/ent/event"
	"github.com/abc3354/CODEV-back/ent/eventinvite"
	"github.com/abc3354/CODEV-back/ent/predicate"
	"github.com/abc3354/CODEV-back/ent/profile"
	"github.com/google/uuid"
)

// EventInviteUpdate is the builder for updating EventInvite entities.
type EventInviteUpdate struct {
	config
	hooks    []Hook
	mutation *EventInviteMutation
}

// Where appends a list predicates to the EventInviteUpdate builder.
func (eiu *EventInviteUpdate) Where(ps ...predicate.EventInvite) *EventInviteUpdate {
	eiu.mutation.Where(ps...)
	return eiu
}

// SetProfileID sets the "profile_id" field.
func (eiu *EventInviteUpdate) SetProfileID(u uuid.UUID) *EventInviteUpdate {
	eiu.mutation.SetProfileID(u)
	return eiu
}

// SetEventID sets the "event_id" field.
func (eiu *EventInviteUpdate) SetEventID(i int) *EventInviteUpdate {
	eiu.mutation.SetEventID(i)
	return eiu
}

// SetSince sets the "since" field.
func (eiu *EventInviteUpdate) SetSince(t time.Time) *EventInviteUpdate {
	eiu.mutation.SetSince(t)
	return eiu
}

// SetNillableSince sets the "since" field if the given value is not nil.
func (eiu *EventInviteUpdate) SetNillableSince(t *time.Time) *EventInviteUpdate {
	if t != nil {
		eiu.SetSince(*t)
	}
	return eiu
}

// SetProfile sets the "profile" edge to the Profile entity.
func (eiu *EventInviteUpdate) SetProfile(p *Profile) *EventInviteUpdate {
	return eiu.SetProfileID(p.ID)
}

// SetEvent sets the "event" edge to the Event entity.
func (eiu *EventInviteUpdate) SetEvent(e *Event) *EventInviteUpdate {
	return eiu.SetEventID(e.ID)
}

// Mutation returns the EventInviteMutation object of the builder.
func (eiu *EventInviteUpdate) Mutation() *EventInviteMutation {
	return eiu.mutation
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (eiu *EventInviteUpdate) ClearProfile() *EventInviteUpdate {
	eiu.mutation.ClearProfile()
	return eiu
}

// ClearEvent clears the "event" edge to the Event entity.
func (eiu *EventInviteUpdate) ClearEvent() *EventInviteUpdate {
	eiu.mutation.ClearEvent()
	return eiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eiu *EventInviteUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, EventInviteMutation](ctx, eiu.sqlSave, eiu.mutation, eiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eiu *EventInviteUpdate) SaveX(ctx context.Context) int {
	affected, err := eiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eiu *EventInviteUpdate) Exec(ctx context.Context) error {
	_, err := eiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eiu *EventInviteUpdate) ExecX(ctx context.Context) {
	if err := eiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eiu *EventInviteUpdate) check() error {
	if _, ok := eiu.mutation.ProfileID(); eiu.mutation.ProfileCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EventInvite.profile"`)
	}
	if _, ok := eiu.mutation.EventID(); eiu.mutation.EventCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EventInvite.event"`)
	}
	return nil
}

func (eiu *EventInviteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eiu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   eventinvite.Table,
			Columns: eventinvite.Columns,
			CompositeID: []*sqlgraph.FieldSpec{
				{
					Type:   field.TypeInt,
					Column: eventinvite.FieldEventID,
				},
				{
					Type:   field.TypeUUID,
					Column: eventinvite.FieldProfileID,
				},
			},
		},
	}
	if ps := eiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eiu.mutation.Since(); ok {
		_spec.SetField(eventinvite.FieldSince, field.TypeTime, value)
	}
	if eiu.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventinvite.ProfileTable,
			Columns: []string{eventinvite.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eiu.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventinvite.ProfileTable,
			Columns: []string{eventinvite.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eiu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventinvite.EventTable,
			Columns: []string{eventinvite.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eiu.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventinvite.EventTable,
			Columns: []string{eventinvite.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventinvite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eiu.mutation.done = true
	return n, nil
}

// EventInviteUpdateOne is the builder for updating a single EventInvite entity.
type EventInviteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventInviteMutation
}

// SetProfileID sets the "profile_id" field.
func (eiuo *EventInviteUpdateOne) SetProfileID(u uuid.UUID) *EventInviteUpdateOne {
	eiuo.mutation.SetProfileID(u)
	return eiuo
}

// SetEventID sets the "event_id" field.
func (eiuo *EventInviteUpdateOne) SetEventID(i int) *EventInviteUpdateOne {
	eiuo.mutation.SetEventID(i)
	return eiuo
}

// SetSince sets the "since" field.
func (eiuo *EventInviteUpdateOne) SetSince(t time.Time) *EventInviteUpdateOne {
	eiuo.mutation.SetSince(t)
	return eiuo
}

// SetNillableSince sets the "since" field if the given value is not nil.
func (eiuo *EventInviteUpdateOne) SetNillableSince(t *time.Time) *EventInviteUpdateOne {
	if t != nil {
		eiuo.SetSince(*t)
	}
	return eiuo
}

// SetProfile sets the "profile" edge to the Profile entity.
func (eiuo *EventInviteUpdateOne) SetProfile(p *Profile) *EventInviteUpdateOne {
	return eiuo.SetProfileID(p.ID)
}

// SetEvent sets the "event" edge to the Event entity.
func (eiuo *EventInviteUpdateOne) SetEvent(e *Event) *EventInviteUpdateOne {
	return eiuo.SetEventID(e.ID)
}

// Mutation returns the EventInviteMutation object of the builder.
func (eiuo *EventInviteUpdateOne) Mutation() *EventInviteMutation {
	return eiuo.mutation
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (eiuo *EventInviteUpdateOne) ClearProfile() *EventInviteUpdateOne {
	eiuo.mutation.ClearProfile()
	return eiuo
}

// ClearEvent clears the "event" edge to the Event entity.
func (eiuo *EventInviteUpdateOne) ClearEvent() *EventInviteUpdateOne {
	eiuo.mutation.ClearEvent()
	return eiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eiuo *EventInviteUpdateOne) Select(field string, fields ...string) *EventInviteUpdateOne {
	eiuo.fields = append([]string{field}, fields...)
	return eiuo
}

// Save executes the query and returns the updated EventInvite entity.
func (eiuo *EventInviteUpdateOne) Save(ctx context.Context) (*EventInvite, error) {
	return withHooks[*EventInvite, EventInviteMutation](ctx, eiuo.sqlSave, eiuo.mutation, eiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eiuo *EventInviteUpdateOne) SaveX(ctx context.Context) *EventInvite {
	node, err := eiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eiuo *EventInviteUpdateOne) Exec(ctx context.Context) error {
	_, err := eiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eiuo *EventInviteUpdateOne) ExecX(ctx context.Context) {
	if err := eiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eiuo *EventInviteUpdateOne) check() error {
	if _, ok := eiuo.mutation.ProfileID(); eiuo.mutation.ProfileCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EventInvite.profile"`)
	}
	if _, ok := eiuo.mutation.EventID(); eiuo.mutation.EventCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EventInvite.event"`)
	}
	return nil
}

func (eiuo *EventInviteUpdateOne) sqlSave(ctx context.Context) (_node *EventInvite, err error) {
	if err := eiuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   eventinvite.Table,
			Columns: eventinvite.Columns,
			CompositeID: []*sqlgraph.FieldSpec{
				{
					Type:   field.TypeInt,
					Column: eventinvite.FieldEventID,
				},
				{
					Type:   field.TypeUUID,
					Column: eventinvite.FieldProfileID,
				},
			},
		},
	}
	if id, ok := eiuo.mutation.EventID(); !ok {
		return nil, &ValidationError{Name: "event_id", err: errors.New(`ent: missing "EventInvite.event_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := eiuo.mutation.ProfileID(); !ok {
		return nil, &ValidationError{Name: "profile_id", err: errors.New(`ent: missing "EventInvite.profile_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := eiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !eventinvite.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := eiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eiuo.mutation.Since(); ok {
		_spec.SetField(eventinvite.FieldSince, field.TypeTime, value)
	}
	if eiuo.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventinvite.ProfileTable,
			Columns: []string{eventinvite.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eiuo.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventinvite.ProfileTable,
			Columns: []string{eventinvite.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eiuo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventinvite.EventTable,
			Columns: []string{eventinvite.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eiuo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventinvite.EventTable,
			Columns: []string{eventinvite.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EventInvite{config: eiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventinvite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eiuo.mutation.done = true
	return _node, nil
}
