// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/abc3354/CODEV-back/ent/profile"
	"github.com/abc3354/CODEV-back/ent/reservation"
	"github.com/abc3354/CODEV-back/ent/salle"
	"github.com/google/uuid"
)

// ReservationCreate is the builder for creating a Reservation entity.
type ReservationCreate struct {
	config
	mutation *ReservationMutation
	hooks    []Hook
}

// SetProfileID sets the "profile_id" field.
func (rc *ReservationCreate) SetProfileID(u uuid.UUID) *ReservationCreate {
	rc.mutation.SetProfileID(u)
	return rc
}

// SetSalleID sets the "salle_id" field.
func (rc *ReservationCreate) SetSalleID(i int) *ReservationCreate {
	rc.mutation.SetSalleID(i)
	return rc
}

// SetQuantityStudents sets the "quantity_students" field.
func (rc *ReservationCreate) SetQuantityStudents(i int) *ReservationCreate {
	rc.mutation.SetQuantityStudents(i)
	return rc
}

// SetHoraireResInitial sets the "horaire_res_initial" field.
func (rc *ReservationCreate) SetHoraireResInitial(t time.Time) *ReservationCreate {
	rc.mutation.SetHoraireResInitial(t)
	return rc
}

// SetHoraireResFinal sets the "horaire_res_final" field.
func (rc *ReservationCreate) SetHoraireResFinal(t time.Time) *ReservationCreate {
	rc.mutation.SetHoraireResFinal(t)
	return rc
}

// SetHoraireAct sets the "horaire_act" field.
func (rc *ReservationCreate) SetHoraireAct(t time.Time) *ReservationCreate {
	rc.mutation.SetHoraireAct(t)
	return rc
}

// SetProfile sets the "profile" edge to the Profile entity.
func (rc *ReservationCreate) SetProfile(p *Profile) *ReservationCreate {
	return rc.SetProfileID(p.ID)
}

// SetSalle sets the "salle" edge to the Salle entity.
func (rc *ReservationCreate) SetSalle(s *Salle) *ReservationCreate {
	return rc.SetSalleID(s.ID)
}

// Mutation returns the ReservationMutation object of the builder.
func (rc *ReservationCreate) Mutation() *ReservationMutation {
	return rc.mutation
}

// Save creates the Reservation in the database.
func (rc *ReservationCreate) Save(ctx context.Context) (*Reservation, error) {
	return withHooks[*Reservation, ReservationMutation](ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ReservationCreate) SaveX(ctx context.Context) *Reservation {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ReservationCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ReservationCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *ReservationCreate) check() error {
	if _, ok := rc.mutation.ProfileID(); !ok {
		return &ValidationError{Name: "profile_id", err: errors.New(`ent: missing required field "Reservation.profile_id"`)}
	}
	if _, ok := rc.mutation.SalleID(); !ok {
		return &ValidationError{Name: "salle_id", err: errors.New(`ent: missing required field "Reservation.salle_id"`)}
	}
	if _, ok := rc.mutation.QuantityStudents(); !ok {
		return &ValidationError{Name: "quantity_students", err: errors.New(`ent: missing required field "Reservation.quantity_students"`)}
	}
	if _, ok := rc.mutation.HoraireResInitial(); !ok {
		return &ValidationError{Name: "horaire_res_initial", err: errors.New(`ent: missing required field "Reservation.horaire_res_initial"`)}
	}
	if _, ok := rc.mutation.HoraireResFinal(); !ok {
		return &ValidationError{Name: "horaire_res_final", err: errors.New(`ent: missing required field "Reservation.horaire_res_final"`)}
	}
	if _, ok := rc.mutation.HoraireAct(); !ok {
		return &ValidationError{Name: "horaire_act", err: errors.New(`ent: missing required field "Reservation.horaire_act"`)}
	}
	if _, ok := rc.mutation.ProfileID(); !ok {
		return &ValidationError{Name: "profile", err: errors.New(`ent: missing required edge "Reservation.profile"`)}
	}
	if _, ok := rc.mutation.SalleID(); !ok {
		return &ValidationError{Name: "salle", err: errors.New(`ent: missing required edge "Reservation.salle"`)}
	}
	return nil
}

func (rc *ReservationCreate) sqlSave(ctx context.Context) (*Reservation, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (rc *ReservationCreate) createSpec() (*Reservation, *sqlgraph.CreateSpec) {
	var (
		_node = &Reservation{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: reservation.Table,
		}
	)
	if value, ok := rc.mutation.QuantityStudents(); ok {
		_spec.SetField(reservation.FieldQuantityStudents, field.TypeInt, value)
		_node.QuantityStudents = value
	}
	if value, ok := rc.mutation.HoraireResInitial(); ok {
		_spec.SetField(reservation.FieldHoraireResInitial, field.TypeTime, value)
		_node.HoraireResInitial = value
	}
	if value, ok := rc.mutation.HoraireResFinal(); ok {
		_spec.SetField(reservation.FieldHoraireResFinal, field.TypeTime, value)
		_node.HoraireResFinal = value
	}
	if value, ok := rc.mutation.HoraireAct(); ok {
		_spec.SetField(reservation.FieldHoraireAct, field.TypeTime, value)
		_node.HoraireAct = value
	}
	if nodes := rc.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reservation.ProfileTable,
			Columns: []string{reservation.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProfileID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.SalleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reservation.SalleTable,
			Columns: []string{reservation.SalleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: salle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SalleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ReservationCreateBulk is the builder for creating many Reservation entities in bulk.
type ReservationCreateBulk struct {
	config
	builders []*ReservationCreate
}

// Save creates the Reservation entities in the database.
func (rcb *ReservationCreateBulk) Save(ctx context.Context) ([]*Reservation, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Reservation, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReservationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ReservationCreateBulk) SaveX(ctx context.Context) []*Reservation {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ReservationCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ReservationCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
